
HACKATHON - CASE STUDY-SOLN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004954  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004ae4  08004ae4  00005ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c04  08004c04  000060c0  2**0
                  CONTENTS
  4 .ARM          00000008  08004c04  08004c04  00005c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c0c  08004c0c  000060c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c0c  08004c0c  00005c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c10  08004c10  00005c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08004c14  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000060c0  2**0
                  CONTENTS
 10 .bss          000002a0  200000c0  200000c0  000060c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  000060c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbf8  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e92  00000000  00000000  00015ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00017b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c44  00000000  00000000  00018af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000206f  00000000  00000000  00019734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001208a  00000000  00000000  0001b7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da06f  00000000  00000000  0002d82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010789c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047c8  00000000  00000000  001078e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0010c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004acc 	.word	0x08004acc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08004acc 	.word	0x08004acc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(GPIO_Pin == GPIO_PIN_6) // if btn1(PA6) is pressed, swich to manual led control by changing TIM1 mode from PWM to normal
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b40      	cmp	r3, #64	@ 0x40
 800057e:	d162      	bne.n	8000646 <HAL_GPIO_EXTI_Callback+0xd6>
  {
	  if(switchToManualMode == 0)
 8000580:	4b38      	ldr	r3, [pc, #224]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d129      	bne.n	80005de <HAL_GPIO_EXTI_Callback+0x6e>
	  {
		  // 1. stop PWM Timer that is generating PWM signals on PE9 (TIM1_CH1)
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	4836      	ldr	r0, [pc, #216]	@ (8000668 <HAL_GPIO_EXTI_Callback+0xf8>)
 800058e:	f002 fc0d 	bl	8002dac <HAL_TIM_PWM_Stop>

		  // 2. configure PE9 mode as GPIO output for manual control
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
		  /*Configure GPIO pins : PE9 as GPIO Output */
		  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005a6:	61fb      	str	r3, [r7, #28]
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	@ 0x24
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	@ 0x28
		  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4619      	mov	r1, r3
 80005ba:	482c      	ldr	r0, [pc, #176]	@ (800066c <HAL_GPIO_EXTI_Callback+0xfc>)
 80005bc:	f001 fadc 	bl	8001b78 <HAL_GPIO_Init>

		  sprintf(str,"switched to manual mode! \r\n");
 80005c0:	492b      	ldr	r1, [pc, #172]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x100>)
 80005c2:	482c      	ldr	r0, [pc, #176]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x104>)
 80005c4:	f003 fde2 	bl	800418c <siprintf>
		  HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
 80005c8:	482a      	ldr	r0, [pc, #168]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x104>)
 80005ca:	f7ff fe01 	bl	80001d0 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	2364      	movs	r3, #100	@ 0x64
 80005d4:	4927      	ldr	r1, [pc, #156]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x104>)
 80005d6:	4828      	ldr	r0, [pc, #160]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x108>)
 80005d8:	f003 fa1c 	bl	8003a14 <HAL_UART_Transmit>
 80005dc:	e02a      	b.n	8000634 <HAL_GPIO_EXTI_Callback+0xc4>
	  {
		  // 1. Reconfigure TIM1 to generate PWM signals on PE9(TIM1_CH1)
		  //MX_TIM1_Init();

		  // 1. reconfigure PE9 mode as GPIO AF1 (TIM1_CH1)
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
		  /*Configure GPIO pins : PE9 MODE as GPIO AF */
		  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005f2:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f4:	2302      	movs	r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
		  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
		  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	4619      	mov	r1, r3
 800060a:	4818      	ldr	r0, [pc, #96]	@ (800066c <HAL_GPIO_EXTI_Callback+0xfc>)
 800060c:	f001 fab4 	bl	8001b78 <HAL_GPIO_Init>

		  // 2. Start PWM
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000610:	2100      	movs	r1, #0
 8000612:	4815      	ldr	r0, [pc, #84]	@ (8000668 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000614:	f002 fb02 	bl	8002c1c <HAL_TIM_PWM_Start>

		  sprintf(str,"switched to auto mode! \r\n");
 8000618:	4918      	ldr	r1, [pc, #96]	@ (800067c <HAL_GPIO_EXTI_Callback+0x10c>)
 800061a:	4816      	ldr	r0, [pc, #88]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x104>)
 800061c:	f003 fdb6 	bl	800418c <siprintf>
		  HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
 8000620:	4814      	ldr	r0, [pc, #80]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x104>)
 8000622:	f7ff fdd5 	bl	80001d0 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	2364      	movs	r3, #100	@ 0x64
 800062c:	4911      	ldr	r1, [pc, #68]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x104>)
 800062e:	4812      	ldr	r0, [pc, #72]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x108>)
 8000630:	f003 f9f0 	bl	8003a14 <HAL_UART_Transmit>
	  }

	  // switchToManualMode = 0(auto mode), 1(manual mode) (flag)
	  //switchToManualMode = ~switchToManualMode;
	  switchToManualMode ^= 0x01; // toggles bit 0
 8000634:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f083 0301 	eor.w	r3, r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000642:	701a      	strb	r2, [r3, #0]
	  //isledOnOrOff = ~isledOnOrOff;
	  isledOnOrOff ^= 0x01;
  }else{
	  // No action
  }
}
 8000644:	e00a      	b.n	800065c <HAL_GPIO_EXTI_Callback+0xec>
  }else if(GPIO_Pin == GPIO_PIN_7)	// if btn2(PA7) is pressed, toggle led by changing the mode of PE9 to output
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	2b80      	cmp	r3, #128	@ 0x80
 800064a:	d107      	bne.n	800065c <HAL_GPIO_EXTI_Callback+0xec>
	  isledOnOrOff ^= 0x01;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <HAL_GPIO_EXTI_Callback+0x110>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <HAL_GPIO_EXTI_Callback+0x110>)
 800065a:	701a      	strb	r2, [r3, #0]
}
 800065c:	bf00      	nop
 800065e:	3730      	adds	r7, #48	@ 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000020e 	.word	0x2000020e
 8000668:	20000178 	.word	0x20000178
 800066c:	40021000 	.word	0x40021000
 8000670:	08004ae4 	.word	0x08004ae4
 8000674:	20000000 	.word	0x20000000
 8000678:	200001c0 	.word	0x200001c0
 800067c:	08004b00 	.word	0x08004b00
 8000680:	2000020f 	.word	0x2000020f

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 fd02 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f8ca 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 fa7c 	bl	8000b8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000694:	f000 fa50 	bl	8000b38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000698:	f000 f92e 	bl	80008f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800069c:	f000 f9ac 	bl	80009f8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80006a0:	f000 f97c 	bl	800099c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //lcd16x2_i2c_init(&hi2c1);
  //char str[40] = "data on uart2\r\n";
  HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
 80006a4:	484f      	ldr	r0, [pc, #316]	@ (80007e4 <main+0x160>)
 80006a6:	f7ff fd93 	bl	80001d0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	2364      	movs	r3, #100	@ 0x64
 80006b0:	494c      	ldr	r1, [pc, #304]	@ (80007e4 <main+0x160>)
 80006b2:	484d      	ldr	r0, [pc, #308]	@ (80007e8 <main+0x164>)
 80006b4:	f003 f9ae 	bl	8003a14 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006b8:	2100      	movs	r1, #0
 80006ba:	484c      	ldr	r0, [pc, #304]	@ (80007ec <main+0x168>)
 80006bc:	f002 faae 	bl	8002c1c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(switchToManualMode == 1)
 80006c0:	4b4b      	ldr	r3, [pc, #300]	@ (80007f0 <main+0x16c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d13c      	bne.n	8000744 <main+0xc0>
	{
		sprintf(str,"running in manual mode... \r\n");
 80006ca:	494a      	ldr	r1, [pc, #296]	@ (80007f4 <main+0x170>)
 80006cc:	4845      	ldr	r0, [pc, #276]	@ (80007e4 <main+0x160>)
 80006ce:	f003 fd5d 	bl	800418c <siprintf>
		HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
 80006d2:	4844      	ldr	r0, [pc, #272]	@ (80007e4 <main+0x160>)
 80006d4:	f7ff fd7c 	bl	80001d0 <strlen>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	2364      	movs	r3, #100	@ 0x64
 80006de:	4941      	ldr	r1, [pc, #260]	@ (80007e4 <main+0x160>)
 80006e0:	4841      	ldr	r0, [pc, #260]	@ (80007e8 <main+0x164>)
 80006e2:	f003 f997 	bl	8003a14 <HAL_UART_Transmit>

		// manual mode
		if(isledOnOrOff == 1){ // turn ON led
 80006e6:	4b44      	ldr	r3, [pc, #272]	@ (80007f8 <main+0x174>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d114      	bne.n	800071a <main+0x96>
			sprintf(str,"turning led on... \r\n");
 80006f0:	4942      	ldr	r1, [pc, #264]	@ (80007fc <main+0x178>)
 80006f2:	483c      	ldr	r0, [pc, #240]	@ (80007e4 <main+0x160>)
 80006f4:	f003 fd4a 	bl	800418c <siprintf>
			HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
 80006f8:	483a      	ldr	r0, [pc, #232]	@ (80007e4 <main+0x160>)
 80006fa:	f7ff fd69 	bl	80001d0 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	4937      	ldr	r1, [pc, #220]	@ (80007e4 <main+0x160>)
 8000706:	4838      	ldr	r0, [pc, #224]	@ (80007e8 <main+0x164>)
 8000708:	f003 f984 	bl	8003a14 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000712:	483b      	ldr	r0, [pc, #236]	@ (8000800 <main+0x17c>)
 8000714:	f001 fbcc 	bl	8001eb0 <HAL_GPIO_WritePin>
 8000718:	e05e      	b.n	80007d8 <main+0x154>
		}else{				   // turn OFF led
			sprintf(str,"turning led off... \r\n");
 800071a:	493a      	ldr	r1, [pc, #232]	@ (8000804 <main+0x180>)
 800071c:	4831      	ldr	r0, [pc, #196]	@ (80007e4 <main+0x160>)
 800071e:	f003 fd35 	bl	800418c <siprintf>
			HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
 8000722:	4830      	ldr	r0, [pc, #192]	@ (80007e4 <main+0x160>)
 8000724:	f7ff fd54 	bl	80001d0 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	2364      	movs	r3, #100	@ 0x64
 800072e:	492d      	ldr	r1, [pc, #180]	@ (80007e4 <main+0x160>)
 8000730:	482d      	ldr	r0, [pc, #180]	@ (80007e8 <main+0x164>)
 8000732:	f003 f96f 	bl	8003a14 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073c:	4830      	ldr	r0, [pc, #192]	@ (8000800 <main+0x17c>)
 800073e:	f001 fbb7 	bl	8001eb0 <HAL_GPIO_WritePin>
 8000742:	e049      	b.n	80007d8 <main+0x154>
		}

	}else
	{
		// automatic mode (default)
		sprintf(str,"running in auto mode... \r\n");
 8000744:	4930      	ldr	r1, [pc, #192]	@ (8000808 <main+0x184>)
 8000746:	4827      	ldr	r0, [pc, #156]	@ (80007e4 <main+0x160>)
 8000748:	f003 fd20 	bl	800418c <siprintf>
		HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
 800074c:	4825      	ldr	r0, [pc, #148]	@ (80007e4 <main+0x160>)
 800074e:	f7ff fd3f 	bl	80001d0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	2364      	movs	r3, #100	@ 0x64
 8000758:	4922      	ldr	r1, [pc, #136]	@ (80007e4 <main+0x160>)
 800075a:	4823      	ldr	r0, [pc, #140]	@ (80007e8 <main+0x164>)
 800075c:	f003 f95a 	bl	8003a14 <HAL_UART_Transmit>

		HAL_ADC_Start(&hadc1);
 8000760:	482a      	ldr	r0, [pc, #168]	@ (800080c <main+0x188>)
 8000762:	f000 fd6f 	bl	8001244 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8000766:	2105      	movs	r1, #5
 8000768:	4828      	ldr	r0, [pc, #160]	@ (800080c <main+0x188>)
 800076a:	f000 fe3d 	bl	80013e8 <HAL_ADC_PollForConversion>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d131      	bne.n	80007d8 <main+0x154>
		{
			adcVal = HAL_ADC_GetValue(&hadc1);
 8000774:	4825      	ldr	r0, [pc, #148]	@ (800080c <main+0x188>)
 8000776:	f000 fec2 	bl	80014fe <HAL_ADC_GetValue>
 800077a:	4603      	mov	r3, r0
 800077c:	4a24      	ldr	r2, [pc, #144]	@ (8000810 <main+0x18c>)
 800077e:	6013      	str	r3, [r2, #0]
			// calcualte percentage of ambient light brightness using ldr Value
			PerBrightness = (adcVal*100)/4095;
 8000780:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <main+0x18c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2264      	movs	r2, #100	@ 0x64
 8000786:	fb03 f202 	mul.w	r2, r3, r2
 800078a:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <main+0x190>)
 800078c:	fba3 1302 	umull	r1, r3, r3, r2
 8000790:	1ad2      	subs	r2, r2, r3
 8000792:	0852      	lsrs	r2, r2, #1
 8000794:	4413      	add	r3, r2
 8000796:	0adb      	lsrs	r3, r3, #11
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <main+0x194>)
 800079c:	701a      	strb	r2, [r3, #0]

			//sprintf(str,"ldrVal = %ld\r\n",adcVal);
			sprintf(str,"Percentage of Ambient Light Brightness = %ld\r\n",adcVal);
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <main+0x18c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	491d      	ldr	r1, [pc, #116]	@ (800081c <main+0x198>)
 80007a6:	480f      	ldr	r0, [pc, #60]	@ (80007e4 <main+0x160>)
 80007a8:	f003 fcf0 	bl	800418c <siprintf>
			HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <main+0x160>)
 80007ae:	f7ff fd0f 	bl	80001d0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	490a      	ldr	r1, [pc, #40]	@ (80007e4 <main+0x160>)
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <main+0x164>)
 80007bc:	f003 f92a 	bl	8003a14 <HAL_UART_Transmit>
			//lcd16x2_i2c_setCursor(0, 0);
			//lcd16x2_i2c_printf(str);

			// adjust duty cycle as per Percentage of Ambient Light Brightness
			dutyCycle = 100 - PerBrightness;
 80007c0:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <main+0x194>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <main+0x19c>)
 80007cc:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR1 = dutyCycle;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <main+0x19c>)
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <main+0x168>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	635a      	str	r2, [r3, #52]	@ 0x34
			//HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 100);
			//lcd16x2_i2c_setCursor(1, 0);
			//lcd16x2_i2c_printf(str);
		}
	}
	HAL_Delay(1000);
 80007d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007dc:	f000 fcca 	bl	8001174 <HAL_Delay>
	if(switchToManualMode == 1)
 80007e0:	e76e      	b.n	80006c0 <main+0x3c>
 80007e2:	bf00      	nop
 80007e4:	20000000 	.word	0x20000000
 80007e8:	200001c0 	.word	0x200001c0
 80007ec:	20000178 	.word	0x20000178
 80007f0:	2000020e 	.word	0x2000020e
 80007f4:	08004b1c 	.word	0x08004b1c
 80007f8:	2000020f 	.word	0x2000020f
 80007fc:	08004b3c 	.word	0x08004b3c
 8000800:	40021000 	.word	0x40021000
 8000804:	08004b54 	.word	0x08004b54
 8000808:	08004b6c 	.word	0x08004b6c
 800080c:	200000dc 	.word	0x200000dc
 8000810:	20000208 	.word	0x20000208
 8000814:	00100101 	.word	0x00100101
 8000818:	2000020d 	.word	0x2000020d
 800081c:	08004b88 	.word	0x08004b88
 8000820:	2000020c 	.word	0x2000020c

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	@ 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fcca 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a27      	ldr	r2, [pc, #156]	@ (80008f0 <SystemClock_Config+0xcc>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a21      	ldr	r2, [pc, #132]	@ (80008f4 <SystemClock_Config+0xd0>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000898:	2340      	movs	r3, #64	@ 0x40
 800089a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fc77 	bl	800219c <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b4:	f000 f9e2 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80008c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80008ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fed8 	bl	800268c <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e2:	f000 f9cb 	bl	8000c7c <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	@ 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_ADC1_Init+0x98>)
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <MX_ADC1_Init+0x9c>)
 800090e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_ADC1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_ADC1_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_ADC1_Init+0xa0>)
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_ADC1_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000944:	2201      	movs	r2, #1
 8000946:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_ADC1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000952:	2201      	movs	r2, #1
 8000954:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000958:	f000 fc30 	bl	80011bc <HAL_ADC_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 f98b 	bl	8000c7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_ADC1_Init+0x98>)
 8000978:	f000 fdce 	bl	8001518 <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000982:	f000 f97b 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000dc 	.word	0x200000dc
 8000994:	40012000 	.word	0x40012000
 8000998:	0f000001 	.word	0x0f000001

0800099c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009a2:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <MX_I2C1_Init+0x54>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009a8:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <MX_I2C1_Init+0x58>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_I2C1_Init+0x50>)
 80009da:	f001 fa9b 	bl	8001f14 <HAL_I2C_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e4:	f000 f94a 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000124 	.word	0x20000124
 80009f0:	40005400 	.word	0x40005400
 80009f4:	000186a0 	.word	0x000186a0

080009f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b096      	sub	sp, #88	@ 0x58
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fbcb 	bl	80041cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a36:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a38:	4a3e      	ldr	r2, [pc, #248]	@ (8000b34 <MX_TIM1_Init+0x13c>)
 8000a3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a3e:	2210      	movs	r2, #16
 8000a40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000a48:	4b39      	ldr	r3, [pc, #228]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a4a:	2264      	movs	r2, #100	@ 0x64
 8000a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b38      	ldr	r3, [pc, #224]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a54:	4b36      	ldr	r3, [pc, #216]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a60:	4833      	ldr	r0, [pc, #204]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a62:	f002 f833 	bl	8002acc <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a6c:	f000 f906 	bl	8000c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a74:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	482c      	ldr	r0, [pc, #176]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a7e:	f002 fac7 	bl	8003010 <HAL_TIM_ConfigClockSource>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a88:	f000 f8f8 	bl	8000c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a8c:	4828      	ldr	r0, [pc, #160]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000a8e:	f002 f86c 	bl	8002b6a <HAL_TIM_PWM_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a98:	f000 f8f0 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4821      	ldr	r0, [pc, #132]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000aac:	f002 fe94 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ab6:	f000 f8e1 	bl	8000c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aba:	2360      	movs	r3, #96	@ 0x60
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 8000abe:	230a      	movs	r3, #10
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4814      	ldr	r0, [pc, #80]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000ae0:	f002 f9d4 	bl	8002e8c <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aea:	f000 f8c7 	bl	8000c7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000b12:	f002 fedd 	bl	80038d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b1c:	f000 f8ae 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <MX_TIM1_Init+0x138>)
 8000b22:	f000 f987 	bl	8000e34 <HAL_TIM_MspPostInit>

}
 8000b26:	bf00      	nop
 8000b28:	3758      	adds	r7, #88	@ 0x58
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000178 	.word	0x20000178
 8000b34:	40010000 	.word	0x40010000

08000b38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f002 ff00 	bl	8003974 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f87f 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200001c0 	.word	0x200001c0
 8000b88:	40004400 	.word	0x40004400

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a31      	ldr	r2, [pc, #196]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000bc8:	f043 0310 	orr.w	r3, r3, #16
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a23      	ldr	r2, [pc, #140]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_GPIO_Init+0xe4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c18:	4816      	ldr	r0, [pc, #88]	@ (8000c74 <MX_GPIO_Init+0xe8>)
 8000c1a:	f001 f949 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23c0      	movs	r3, #192	@ 0xc0
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <MX_GPIO_Init+0xec>)
 8000c34:	f000 ffa0 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c38:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4808      	ldr	r0, [pc, #32]	@ (8000c74 <MX_GPIO_Init+0xe8>)
 8000c52:	f000 ff91 	bl	8001b78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2017      	movs	r0, #23
 8000c5c:	f000 ff55 	bl	8001b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c60:	2017      	movs	r0, #23
 8000c62:	f000 ff6e 	bl	8001b42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	40020000 	.word	0x40020000

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <Error_Handler+0x8>

08000c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f000 ff14 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_ADC_MspInit+0x7c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d127      	bne.n	8000d4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_ADC_MspInit+0x80>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	4a15      	ldr	r2, [pc, #84]	@ (8000d58 <HAL_ADC_MspInit+0x80>)
 8000d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_ADC_MspInit+0x80>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_ADC_MspInit+0x80>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <HAL_ADC_MspInit+0x80>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_ADC_MspInit+0x80>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <HAL_ADC_MspInit+0x84>)
 8000d46:	f000 ff17 	bl	8001b78 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	@ 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40012000 	.word	0x40012000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <HAL_I2C_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12b      	bne.n	8000dda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <HAL_I2C_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <HAL_I2C_MspInit+0x88>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <HAL_I2C_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d9e:	23c0      	movs	r3, #192	@ 0xc0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da2:	2312      	movs	r3, #18
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dae:	2304      	movs	r3, #4
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <HAL_I2C_MspInit+0x8c>)
 8000dba:	f000 fedd 	bl	8001b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_I2C_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <HAL_I2C_MspInit+0x88>)
 8000dc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_I2C_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40005400 	.word	0x40005400
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020400 	.word	0x40020400

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d10d      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <HAL_TIM_Base_MspInit+0x40>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <HAL_TIM_MspPostInit+0x68>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d11e      	bne.n	8000e94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <HAL_TIM_MspPostInit+0x6c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ea0 <HAL_TIM_MspPostInit+0x6c>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_TIM_MspPostInit+0x6c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <HAL_TIM_MspPostInit+0x70>)
 8000e90:	f000 fe72 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <HAL_UART_MspInit+0x84>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12b      	bne.n	8000f22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a17      	ldr	r2, [pc, #92]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_UART_MspInit+0x8c>)
 8000f1e:	f000 fe2b 	bl	8001b78 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <NMI_Handler+0x4>

08000f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <MemManage_Handler+0x4>

08000f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 f8d1 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f9a:	2040      	movs	r0, #64	@ 0x40
 8000f9c:	f000 ffa2 	bl	8001ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fa0:	2080      	movs	r0, #128	@ 0x80
 8000fa2:	f000 ff9f 	bl	8001ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f003 f8fe 	bl	80041dc <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20020000 	.word	0x20020000
 800100c:	00000400 	.word	0x00000400
 8001010:	20000210 	.word	0x20000210
 8001014:	20000360 	.word	0x20000360

08001018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001074 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f003 f8bd 	bl	80041e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fb09 	bl	8000684 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001080:	08004c14 	.word	0x08004c14
  ldr r2, =_sbss
 8001084:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001088:	20000360 	.word	0x20000360

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>
	...

08001090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001094:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <HAL_Init+0x40>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800109e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <HAL_Init+0x40>)
 80010a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <HAL_Init+0x40>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 fd1b 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fde0 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fd33 	bl	8001b5e <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001110:	f000 fcfb 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000064 	.word	0x20000064
 800112c:	2000006c 	.word	0x2000006c
 8001130:	20000068 	.word	0x20000068

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2000006c 	.word	0x2000006c
 8001158:	20000214 	.word	0x20000214

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000214 	.word	0x20000214

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000006c 	.word	0x2000006c

080011bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e033      	b.n	800123a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fd7c 	bl	8000cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001202:	f023 0302 	bic.w	r3, r3, #2
 8001206:	f043 0202 	orr.w	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 faa4 	bl	800175c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f023 0303 	bic.w	r3, r3, #3
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	@ 0x40
 800122a:	e001      	b.n	8001230 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_ADC_Start+0x1a>
 800125a:	2302      	movs	r3, #2
 800125c:	e0b2      	b.n	80013c4 <HAL_ADC_Start+0x180>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	d018      	beq.n	80012a6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001284:	4b52      	ldr	r3, [pc, #328]	@ (80013d0 <HAL_ADC_Start+0x18c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a52      	ldr	r2, [pc, #328]	@ (80013d4 <HAL_ADC_Start+0x190>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9a      	lsrs	r2, r3, #18
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001298:	e002      	b.n	80012a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3b01      	subs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d17a      	bne.n	80013aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012f2:	d106      	bne.n	8001302 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f8:	f023 0206 	bic.w	r2, r3, #6
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001300:	e002      	b.n	8001308 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001310:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <HAL_ADC_Start+0x194>)
 8001312:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800131c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2b00      	cmp	r3, #0
 8001328:	d12a      	bne.n	8001380 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a2b      	ldr	r2, [pc, #172]	@ (80013dc <HAL_ADC_Start+0x198>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d015      	beq.n	8001360 <HAL_ADC_Start+0x11c>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a29      	ldr	r2, [pc, #164]	@ (80013e0 <HAL_ADC_Start+0x19c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d105      	bne.n	800134a <HAL_ADC_Start+0x106>
 800133e:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <HAL_ADC_Start+0x194>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a25      	ldr	r2, [pc, #148]	@ (80013e4 <HAL_ADC_Start+0x1a0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d136      	bne.n	80013c2 <HAL_ADC_Start+0x17e>
 8001354:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <HAL_ADC_Start+0x194>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	d130      	bne.n	80013c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d129      	bne.n	80013c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	e020      	b.n	80013c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a15      	ldr	r2, [pc, #84]	@ (80013dc <HAL_ADC_Start+0x198>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d11b      	bne.n	80013c2 <HAL_ADC_Start+0x17e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d114      	bne.n	80013c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	e00b      	b.n	80013c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f043 0210 	orr.w	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000064 	.word	0x20000064
 80013d4:	431bde83 	.word	0x431bde83
 80013d8:	40012300 	.word	0x40012300
 80013dc:	40012000 	.word	0x40012000
 80013e0:	40012100 	.word	0x40012100
 80013e4:	40012200 	.word	0x40012200

080013e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001404:	d113      	bne.n	800142e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001414:	d10b      	bne.n	800142e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f043 0220 	orr.w	r2, r3, #32
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e063      	b.n	80014f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800142e:	f7ff fe95 	bl	800115c <HAL_GetTick>
 8001432:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001434:	e021      	b.n	800147a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800143c:	d01d      	beq.n	800147a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d007      	beq.n	8001454 <HAL_ADC_PollForConversion+0x6c>
 8001444:	f7ff fe8a 	bl	800115c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d212      	bcs.n	800147a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b02      	cmp	r3, #2
 8001460:	d00b      	beq.n	800147a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f043 0204 	orr.w	r2, r3, #4
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e03d      	b.n	80014f6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b02      	cmp	r3, #2
 8001486:	d1d6      	bne.n	8001436 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f06f 0212 	mvn.w	r2, #18
 8001490:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d123      	bne.n	80014f4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d11f      	bne.n	80014f4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d111      	bne.n	80014f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	f043 0201 	orr.w	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1c>
 8001530:	2302      	movs	r3, #2
 8001532:	e105      	b.n	8001740 <HAL_ADC_ConfigChannel+0x228>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b09      	cmp	r3, #9
 8001542:	d925      	bls.n	8001590 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68d9      	ldr	r1, [r3, #12]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	3b1e      	subs	r3, #30
 800155a:	2207      	movs	r2, #7
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43da      	mvns	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	400a      	ands	r2, r1
 8001568:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	4603      	mov	r3, r0
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4403      	add	r3, r0
 8001582:	3b1e      	subs	r3, #30
 8001584:	409a      	lsls	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	e022      	b.n	80015d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6919      	ldr	r1, [r3, #16]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	2207      	movs	r2, #7
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	400a      	ands	r2, r1
 80015b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6919      	ldr	r1, [r3, #16]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4403      	add	r3, r0
 80015cc:	409a      	lsls	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d824      	bhi.n	8001628 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	3b05      	subs	r3, #5
 80015f0:	221f      	movs	r2, #31
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	400a      	ands	r2, r1
 80015fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	3b05      	subs	r3, #5
 800161a:	fa00 f203 	lsl.w	r2, r0, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	635a      	str	r2, [r3, #52]	@ 0x34
 8001626:	e04c      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d824      	bhi.n	800167a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	3b23      	subs	r3, #35	@ 0x23
 8001642:	221f      	movs	r2, #31
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43da      	mvns	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	400a      	ands	r2, r1
 8001650:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b23      	subs	r3, #35	@ 0x23
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	631a      	str	r2, [r3, #48]	@ 0x30
 8001678:	e023      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	3b41      	subs	r3, #65	@ 0x41
 800168c:	221f      	movs	r2, #31
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	400a      	ands	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3b41      	subs	r3, #65	@ 0x41
 80016b6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HAL_ADC_ConfigChannel+0x234>)
 80016c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a21      	ldr	r2, [pc, #132]	@ (8001750 <HAL_ADC_ConfigChannel+0x238>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d109      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1cc>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	d105      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	@ (8001750 <HAL_ADC_ConfigChannel+0x238>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d123      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x21e>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d003      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x1e6>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b11      	cmp	r3, #17
 80016fc:	d11b      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d111      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_ADC_ConfigChannel+0x23c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_ADC_ConfigChannel+0x240>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	0c9a      	lsrs	r2, r3, #18
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001728:	e002      	b.n	8001730 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	3b01      	subs	r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f9      	bne.n	800172a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40012300 	.word	0x40012300
 8001750:	40012000 	.word	0x40012000
 8001754:	20000064 	.word	0x20000064
 8001758:	431bde83 	.word	0x431bde83

0800175c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001764:	4b79      	ldr	r3, [pc, #484]	@ (800194c <ADC_Init+0x1f0>)
 8001766:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	431a      	orrs	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	021a      	lsls	r2, r3, #8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	4a58      	ldr	r2, [pc, #352]	@ (8001950 <ADC_Init+0x1f4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d022      	beq.n	800183a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001802:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6899      	ldr	r1, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6899      	ldr	r1, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	e00f      	b.n	800185a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001858:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0202 	bic.w	r2, r2, #2
 8001868:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6899      	ldr	r1, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7e1b      	ldrb	r3, [r3, #24]
 8001874:	005a      	lsls	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01b      	beq.n	80018c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001896:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6859      	ldr	r1, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	3b01      	subs	r3, #1
 80018b4:	035a      	lsls	r2, r3, #13
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	e007      	b.n	80018d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	051a      	lsls	r2, r3, #20
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6899      	ldr	r1, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001912:	025a      	lsls	r2, r3, #9
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800192a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6899      	ldr	r1, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	029a      	lsls	r2, r3, #10
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	609a      	str	r2, [r3, #8]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40012300 	.word	0x40012300
 8001950:	0f000001 	.word	0x0f000001

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	@ (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	@ (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ad4:	f7ff ff8e 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff29 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff3e 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff8e 	bl	8001a48 <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5d 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff31 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa2 	bl	8001ab0 <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	@ 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e16b      	b.n	8001e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 815a 	bne.w	8001e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d130      	bne.n	8001c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0201 	and.w	r2, r3, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d017      	beq.n	8001c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d123      	bne.n	8001cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80b4 	beq.w	8001e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b60      	ldr	r3, [pc, #384]	@ (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	4a5f      	ldr	r2, [pc, #380]	@ (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e88 <HAL_GPIO_Init+0x310>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a52      	ldr	r2, [pc, #328]	@ (8001e8c <HAL_GPIO_Init+0x314>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02b      	beq.n	8001d9e <HAL_GPIO_Init+0x226>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a51      	ldr	r2, [pc, #324]	@ (8001e90 <HAL_GPIO_Init+0x318>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x222>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a50      	ldr	r2, [pc, #320]	@ (8001e94 <HAL_GPIO_Init+0x31c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x21e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4f      	ldr	r2, [pc, #316]	@ (8001e98 <HAL_GPIO_Init+0x320>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x21a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4e      	ldr	r2, [pc, #312]	@ (8001e9c <HAL_GPIO_Init+0x324>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x216>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea0 <HAL_GPIO_Init+0x328>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea4 <HAL_GPIO_Init+0x32c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x20e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea8 <HAL_GPIO_Init+0x330>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x20a>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e00e      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d82:	2308      	movs	r3, #8
 8001d84:	e00c      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00a      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x228>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db0:	4935      	ldr	r1, [pc, #212]	@ (8001e88 <HAL_GPIO_Init+0x310>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a32      	ldr	r2, [pc, #200]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a27      	ldr	r2, [pc, #156]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e12:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e36:	4a1d      	ldr	r2, [pc, #116]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e60:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <HAL_GPIO_Init+0x334>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	f67f ae90 	bls.w	8001b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40021400 	.word	0x40021400
 8001ea4:	40021800 	.word	0x40021800
 8001ea8:	40021c00 	.word	0x40021c00
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb34 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e12b      	b.n	800217e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe ff10 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	@ 0x24
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f78:	f000 fd80 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8001f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a81      	ldr	r2, [pc, #516]	@ (8002188 <HAL_I2C_Init+0x274>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d807      	bhi.n	8001f98 <HAL_I2C_Init+0x84>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a80      	ldr	r2, [pc, #512]	@ (800218c <HAL_I2C_Init+0x278>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf94      	ite	ls
 8001f90:	2301      	movls	r3, #1
 8001f92:	2300      	movhi	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e006      	b.n	8001fa6 <HAL_I2C_Init+0x92>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a7d      	ldr	r2, [pc, #500]	@ (8002190 <HAL_I2C_Init+0x27c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0e7      	b.n	800217e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a78      	ldr	r2, [pc, #480]	@ (8002194 <HAL_I2C_Init+0x280>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0c9b      	lsrs	r3, r3, #18
 8001fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8002188 <HAL_I2C_Init+0x274>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d802      	bhi.n	8001fe8 <HAL_I2C_Init+0xd4>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	e009      	b.n	8001ffc <HAL_I2C_Init+0xe8>
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	4a69      	ldr	r2, [pc, #420]	@ (8002198 <HAL_I2C_Init+0x284>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	430b      	orrs	r3, r1
 8002002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800200e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	495c      	ldr	r1, [pc, #368]	@ (8002188 <HAL_I2C_Init+0x274>)
 8002018:	428b      	cmp	r3, r1
 800201a:	d819      	bhi.n	8002050 <HAL_I2C_Init+0x13c>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e59      	subs	r1, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fbb1 f3f3 	udiv	r3, r1, r3
 800202a:	1c59      	adds	r1, r3, #1
 800202c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002030:	400b      	ands	r3, r1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_I2C_Init+0x138>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1e59      	subs	r1, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fbb1 f3f3 	udiv	r3, r1, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204a:	e051      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 800204c:	2304      	movs	r3, #4
 800204e:	e04f      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d111      	bne.n	800207c <HAL_I2C_Init+0x168>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	440b      	add	r3, r1
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e012      	b.n	80020a2 <HAL_I2C_Init+0x18e>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	0099      	lsls	r1, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_Init+0x196>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e022      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10e      	bne.n	80020d0 <HAL_I2C_Init+0x1bc>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e58      	subs	r0, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	440b      	add	r3, r1
 80020c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ce:	e00f      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	6809      	ldr	r1, [r1, #0]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800211e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6911      	ldr	r1, [r2, #16]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68d2      	ldr	r2, [r2, #12]
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	000186a0 	.word	0x000186a0
 800218c:	001e847f 	.word	0x001e847f
 8002190:	003d08ff 	.word	0x003d08ff
 8002194:	431bde83 	.word	0x431bde83
 8002198:	10624dd3 	.word	0x10624dd3

0800219c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e267      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d075      	beq.n	80022a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ba:	4b88      	ldr	r3, [pc, #544]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d00c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	4b85      	ldr	r3, [pc, #532]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d112      	bne.n	80021f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	4b82      	ldr	r3, [pc, #520]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021de:	d10b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	4b7e      	ldr	r3, [pc, #504]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d05b      	beq.n	80022a4 <HAL_RCC_OscConfig+0x108>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d157      	bne.n	80022a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e242      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x74>
 8002202:	4b76      	ldr	r3, [pc, #472]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a75      	ldr	r2, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xb0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b70      	ldr	r3, [pc, #448]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6f      	ldr	r2, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b6d      	ldr	r3, [pc, #436]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6c      	ldr	r2, [pc, #432]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xb0>
 8002234:	4b69      	ldr	r3, [pc, #420]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a68      	ldr	r2, [pc, #416]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a65      	ldr	r2, [pc, #404]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe ff82 	bl	800115c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe ff7e 	bl	800115c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e207      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b5b      	ldr	r3, [pc, #364]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xc0>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe ff6e 	bl	800115c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe ff6a 	bl	800115c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	@ 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1f3      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b51      	ldr	r3, [pc, #324]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0xe8>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b47      	ldr	r3, [pc, #284]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ca:	4b44      	ldr	r3, [pc, #272]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x152>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1c7      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b3b      	ldr	r3, [pc, #236]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4937      	ldr	r1, [pc, #220]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e03a      	b.n	800237a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7fe ff23 	bl	800115c <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7fe ff1f 	bl	800115c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1a8      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4b2b      	ldr	r3, [pc, #172]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4925      	ldr	r1, [pc, #148]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe ff02 	bl	800115c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7fe fefe 	bl	800115c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e187      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d036      	beq.n	80023f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_RCC_OscConfig+0x248>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7fe fee2 	bl	800115c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239c:	f7fe fede 	bl	800115c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e167      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x200>
 80023ba:	e01b      	b.n	80023f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x248>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fecb 	bl	800115c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	e00e      	b.n	80023e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe fec7 	bl	800115c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d907      	bls.n	80023e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e150      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
 80023dc:	40023800 	.word	0x40023800
 80023e0:	42470000 	.word	0x42470000
 80023e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b88      	ldr	r3, [pc, #544]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80023ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ea      	bne.n	80023ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8097 	beq.w	8002530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b81      	ldr	r3, [pc, #516]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b7d      	ldr	r3, [pc, #500]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a7c      	ldr	r2, [pc, #496]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b7a      	ldr	r3, [pc, #488]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b77      	ldr	r3, [pc, #476]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d118      	bne.n	8002470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243e:	4b74      	ldr	r3, [pc, #464]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a73      	ldr	r2, [pc, #460]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244a:	f7fe fe87 	bl	800115c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7fe fe83 	bl	800115c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e10c      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	4b6a      	ldr	r3, [pc, #424]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x2ea>
 8002478:	4b64      	ldr	r3, [pc, #400]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	4a63      	ldr	r2, [pc, #396]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	@ 0x70
 8002484:	e01c      	b.n	80024c0 <HAL_RCC_OscConfig+0x324>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b05      	cmp	r3, #5
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x30c>
 800248e:	4b5f      	ldr	r3, [pc, #380]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	4a5e      	ldr	r2, [pc, #376]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6713      	str	r3, [r2, #112]	@ 0x70
 800249a:	4b5c      	ldr	r3, [pc, #368]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	4a5b      	ldr	r2, [pc, #364]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0x324>
 80024a8:	4b58      	ldr	r3, [pc, #352]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a57      	ldr	r2, [pc, #348]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b4:	4b55      	ldr	r3, [pc, #340]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b8:	4a54      	ldr	r2, [pc, #336]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fe48 	bl	800115c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fe44 	bl	800115c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0cb      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	4b49      	ldr	r3, [pc, #292]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ee      	beq.n	80024d0 <HAL_RCC_OscConfig+0x334>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fe32 	bl	800115c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe fe2e 	bl	800115c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0b5      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002512:	4b3e      	ldr	r3, [pc, #248]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ee      	bne.n	80024fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b39      	ldr	r3, [pc, #228]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	4a38      	ldr	r2, [pc, #224]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a1 	beq.w	800267c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800253a:	4b34      	ldr	r3, [pc, #208]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d05c      	beq.n	8002600 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d141      	bne.n	80025d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fe02 	bl	800115c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe fdfe 	bl	800115c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e087      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	3b01      	subs	r3, #1
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	491b      	ldr	r1, [pc, #108]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fdd7 	bl	800115c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fe fdd3 	bl	800115c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e05c      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x416>
 80025d0:	e054      	b.n	800267c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fdc0 	bl	800115c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fdbc 	bl	800115c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e045      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x444>
 80025fe:	e03d      	b.n	800267c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e038      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
 800260c:	40023800 	.word	0x40023800
 8002610:	40007000 	.word	0x40007000
 8002614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x4ec>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d028      	beq.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d121      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d11a      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800264e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002650:	4293      	cmp	r3, r2
 8002652:	d111      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d107      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0cc      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b68      	ldr	r3, [pc, #416]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d90c      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b65      	ldr	r3, [pc, #404]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b63      	ldr	r3, [pc, #396]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b59      	ldr	r3, [pc, #356]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a58      	ldr	r2, [pc, #352]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f8:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4a52      	ldr	r2, [pc, #328]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b50      	ldr	r3, [pc, #320]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	494d      	ldr	r1, [pc, #308]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d044      	beq.n	80027ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d119      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d003      	beq.n	800274a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274a:	4b3f      	ldr	r3, [pc, #252]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e067      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276a:	4b37      	ldr	r3, [pc, #220]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4934      	ldr	r1, [pc, #208]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800277c:	f7fe fcee 	bl	800115c <HAL_GetTick>
 8002780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	e00a      	b.n	800279a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe fcea 	bl	800115c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e04f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 020c 	and.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1eb      	bne.n	8002784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ac:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d20c      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e032      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4916      	ldr	r1, [pc, #88]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fe:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490e      	ldr	r1, [pc, #56]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002812:	f000 f821 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490a      	ldr	r1, [pc, #40]	@ (800284c <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fc4e 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023c00 	.word	0x40023c00
 8002848:	40023800 	.word	0x40023800
 800284c:	08004bb8 	.word	0x08004bb8
 8002850:	20000064 	.word	0x20000064
 8002854:	20000068 	.word	0x20000068

08002858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b094      	sub	sp, #80	@ 0x50
 800285e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002870:	4b79      	ldr	r3, [pc, #484]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d00d      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x40>
 800287c:	2b08      	cmp	r3, #8
 800287e:	f200 80e1 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x34>
 8002886:	2b04      	cmp	r3, #4
 8002888:	d003      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x3a>
 800288a:	e0db      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800288e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002890:	e0db      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002892:	4b73      	ldr	r3, [pc, #460]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002896:	e0d8      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002898:	4b6f      	ldr	r3, [pc, #444]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d063      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	2200      	movs	r2, #0
 80028b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028ca:	4622      	mov	r2, r4
 80028cc:	462b      	mov	r3, r5
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028dc:	0150      	lsls	r0, r2, #5
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4621      	mov	r1, r4
 80028e4:	1a51      	subs	r1, r2, r1
 80028e6:	6139      	str	r1, [r7, #16]
 80028e8:	4629      	mov	r1, r5
 80028ea:	eb63 0301 	sbc.w	r3, r3, r1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028fc:	4659      	mov	r1, fp
 80028fe:	018b      	lsls	r3, r1, #6
 8002900:	4651      	mov	r1, sl
 8002902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002906:	4651      	mov	r1, sl
 8002908:	018a      	lsls	r2, r1, #6
 800290a:	4651      	mov	r1, sl
 800290c:	ebb2 0801 	subs.w	r8, r2, r1
 8002910:	4659      	mov	r1, fp
 8002912:	eb63 0901 	sbc.w	r9, r3, r1
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800292a:	4690      	mov	r8, r2
 800292c:	4699      	mov	r9, r3
 800292e:	4623      	mov	r3, r4
 8002930:	eb18 0303 	adds.w	r3, r8, r3
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	462b      	mov	r3, r5
 8002938:	eb49 0303 	adc.w	r3, r9, r3
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800294a:	4629      	mov	r1, r5
 800294c:	024b      	lsls	r3, r1, #9
 800294e:	4621      	mov	r1, r4
 8002950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002954:	4621      	mov	r1, r4
 8002956:	024a      	lsls	r2, r1, #9
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800295e:	2200      	movs	r2, #0
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002968:	f7fd fc8a 	bl	8000280 <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4613      	mov	r3, r2
 8002972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002974:	e058      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002976:	4b38      	ldr	r3, [pc, #224]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	2200      	movs	r2, #0
 800297e:	4618      	mov	r0, r3
 8002980:	4611      	mov	r1, r2
 8002982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
 800298c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002990:	4642      	mov	r2, r8
 8002992:	464b      	mov	r3, r9
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	0159      	lsls	r1, r3, #5
 800299e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a2:	0150      	lsls	r0, r2, #5
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4641      	mov	r1, r8
 80029aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ae:	4649      	mov	r1, r9
 80029b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029c8:	ebb2 040a 	subs.w	r4, r2, sl
 80029cc:	eb63 050b 	sbc.w	r5, r3, fp
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	00eb      	lsls	r3, r5, #3
 80029da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029de:	00e2      	lsls	r2, r4, #3
 80029e0:	4614      	mov	r4, r2
 80029e2:	461d      	mov	r5, r3
 80029e4:	4643      	mov	r3, r8
 80029e6:	18e3      	adds	r3, r4, r3
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	464b      	mov	r3, r9
 80029ec:	eb45 0303 	adc.w	r3, r5, r3
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029fe:	4629      	mov	r1, r5
 8002a00:	028b      	lsls	r3, r1, #10
 8002a02:	4621      	mov	r1, r4
 8002a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a08:	4621      	mov	r1, r4
 8002a0a:	028a      	lsls	r2, r1, #10
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a12:	2200      	movs	r2, #0
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	61fa      	str	r2, [r7, #28]
 8002a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1c:	f7fd fc30 	bl	8000280 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4613      	mov	r3, r2
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3750      	adds	r7, #80	@ 0x50
 8002a50:	46bd      	mov	sp, r7
 8002a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	00f42400 	.word	0x00f42400
 8002a60:	007a1200 	.word	0x007a1200

08002a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000064 	.word	0x20000064

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a80:	f7ff fff0 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	@ (8002aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	08004bc8 	.word	0x08004bc8

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa8:	f7ff ffdc 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0b5b      	lsrs	r3, r3, #13
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4903      	ldr	r1, [pc, #12]	@ (8002ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	08004bc8 	.word	0x08004bc8

08002acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e041      	b.n	8002b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe f97c 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f000 fb48 	bl	80031a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e041      	b.n	8002c00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f839 	bl	8002c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f000 faf9 	bl	80031a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_TIM_PWM_Start+0x24>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e022      	b.n	8002c86 <HAL_TIM_PWM_Start+0x6a>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d109      	bne.n	8002c5a <HAL_TIM_PWM_Start+0x3e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e015      	b.n	8002c86 <HAL_TIM_PWM_Start+0x6a>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d109      	bne.n	8002c74 <HAL_TIM_PWM_Start+0x58>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e008      	b.n	8002c86 <HAL_TIM_PWM_Start+0x6a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07c      	b.n	8002d88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Start+0x82>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c9c:	e013      	b.n	8002cc6 <HAL_TIM_PWM_Start+0xaa>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_PWM_Start+0x92>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cac:	e00b      	b.n	8002cc6 <HAL_TIM_PWM_Start+0xaa>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_PWM_Start+0xa2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cbc:	e003      	b.n	8002cc6 <HAL_TIM_PWM_Start+0xaa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fd5c 	bl	800378c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8002d90 <HAL_TIM_PWM_Start+0x174>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_TIM_PWM_Start+0xcc>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d94 <HAL_TIM_PWM_Start+0x178>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_TIM_PWM_Start+0xd0>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_TIM_PWM_Start+0xd2>
 8002cec:	2300      	movs	r3, #0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a22      	ldr	r2, [pc, #136]	@ (8002d90 <HAL_TIM_PWM_Start+0x174>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <HAL_TIM_PWM_Start+0x136>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d14:	d01d      	beq.n	8002d52 <HAL_TIM_PWM_Start+0x136>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d98 <HAL_TIM_PWM_Start+0x17c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d018      	beq.n	8002d52 <HAL_TIM_PWM_Start+0x136>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <HAL_TIM_PWM_Start+0x180>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_TIM_PWM_Start+0x136>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <HAL_TIM_PWM_Start+0x184>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_TIM_PWM_Start+0x136>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a16      	ldr	r2, [pc, #88]	@ (8002d94 <HAL_TIM_PWM_Start+0x178>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_TIM_PWM_Start+0x136>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <HAL_TIM_PWM_Start+0x188>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_TIM_PWM_Start+0x136>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a16      	ldr	r2, [pc, #88]	@ (8002da8 <HAL_TIM_PWM_Start+0x18c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d111      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d010      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d74:	e007      	b.n	8002d86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40010400 	.word	0x40010400
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40001800 	.word	0x40001800

08002dac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fce4 	bl	800378c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e84 <HAL_TIM_PWM_Stop+0xd8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_TIM_PWM_Stop+0x2c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <HAL_TIM_PWM_Stop+0xdc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIM_PWM_Stop+0x30>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_TIM_PWM_Stop+0x32>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d017      	beq.n	8002e12 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_TIM_PWM_Stop+0x66>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	f240 4344 	movw	r3, #1092	@ 0x444
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_TIM_PWM_Stop+0x66>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <HAL_TIM_PWM_Stop+0x96>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <HAL_TIM_PWM_Stop+0x96>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Stop+0xa6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e50:	e013      	b.n	8002e7a <HAL_TIM_PWM_Stop+0xce>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Stop+0xb6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e60:	e00b      	b.n	8002e7a <HAL_TIM_PWM_Stop+0xce>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Stop+0xc6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e70:	e003      	b.n	8002e7a <HAL_TIM_PWM_Stop+0xce>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40010400 	.word	0x40010400

08002e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e0ae      	b.n	8003008 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	f200 809f 	bhi.w	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eba:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ef5 	.word	0x08002ef5
 8002ec4:	08002ff9 	.word	0x08002ff9
 8002ec8:	08002ff9 	.word	0x08002ff9
 8002ecc:	08002ff9 	.word	0x08002ff9
 8002ed0:	08002f35 	.word	0x08002f35
 8002ed4:	08002ff9 	.word	0x08002ff9
 8002ed8:	08002ff9 	.word	0x08002ff9
 8002edc:	08002ff9 	.word	0x08002ff9
 8002ee0:	08002f77 	.word	0x08002f77
 8002ee4:	08002ff9 	.word	0x08002ff9
 8002ee8:	08002ff9 	.word	0x08002ff9
 8002eec:	08002ff9 	.word	0x08002ff9
 8002ef0:	08002fb7 	.word	0x08002fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f9fc 	bl	80032f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0208 	orr.w	r2, r2, #8
 8002f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0204 	bic.w	r2, r2, #4
 8002f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	619a      	str	r2, [r3, #24]
      break;
 8002f32:	e064      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fa4c 	bl	80033d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6999      	ldr	r1, [r3, #24]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	021a      	lsls	r2, r3, #8
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	619a      	str	r2, [r3, #24]
      break;
 8002f74:	e043      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 faa1 	bl	80034c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0208 	orr.w	r2, r2, #8
 8002f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0204 	bic.w	r2, r2, #4
 8002fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69d9      	ldr	r1, [r3, #28]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	61da      	str	r2, [r3, #28]
      break;
 8002fb4:	e023      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 faf5 	bl	80035ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69d9      	ldr	r1, [r3, #28]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	021a      	lsls	r2, r3, #8
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	61da      	str	r2, [r3, #28]
      break;
 8002ff6:	e002      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003006:	7dfb      	ldrb	r3, [r7, #23]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_TIM_ConfigClockSource+0x1c>
 8003028:	2302      	movs	r3, #2
 800302a:	e0b4      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x186>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800304a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003064:	d03e      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800306a:	f200 8087 	bhi.w	800317c <HAL_TIM_ConfigClockSource+0x16c>
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003072:	f000 8086 	beq.w	8003182 <HAL_TIM_ConfigClockSource+0x172>
 8003076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307a:	d87f      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b70      	cmp	r3, #112	@ 0x70
 800307e:	d01a      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003080:	2b70      	cmp	r3, #112	@ 0x70
 8003082:	d87b      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b60      	cmp	r3, #96	@ 0x60
 8003086:	d050      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x11a>
 8003088:	2b60      	cmp	r3, #96	@ 0x60
 800308a:	d877      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b50      	cmp	r3, #80	@ 0x50
 800308e:	d03c      	beq.n	800310a <HAL_TIM_ConfigClockSource+0xfa>
 8003090:	2b50      	cmp	r3, #80	@ 0x50
 8003092:	d873      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x16c>
 8003094:	2b40      	cmp	r3, #64	@ 0x40
 8003096:	d058      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x13a>
 8003098:	2b40      	cmp	r3, #64	@ 0x40
 800309a:	d86f      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b30      	cmp	r3, #48	@ 0x30
 800309e:	d064      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	2b30      	cmp	r3, #48	@ 0x30
 80030a2:	d86b      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d060      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x15a>
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d867      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05c      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x15a>
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d05a      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x15a>
 80030b4:	e062      	b.n	800317c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c6:	f000 fb41 	bl	800374c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	609a      	str	r2, [r3, #8]
      break;
 80030e2:	e04f      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030f4:	f000 fb2a 	bl	800374c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003106:	609a      	str	r2, [r3, #8]
      break;
 8003108:	e03c      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003116:	461a      	mov	r2, r3
 8003118:	f000 fa9e 	bl	8003658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2150      	movs	r1, #80	@ 0x50
 8003122:	4618      	mov	r0, r3
 8003124:	f000 faf7 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003128:	e02c      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003136:	461a      	mov	r2, r3
 8003138:	f000 fabd 	bl	80036b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2160      	movs	r1, #96	@ 0x60
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fae7 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003148:	e01c      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003156:	461a      	mov	r2, r3
 8003158:	f000 fa7e 	bl	8003658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2140      	movs	r1, #64	@ 0x40
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fad7 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003168:	e00c      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f000 face 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 800317a:	e003      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      break;
 8003180:	e000      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a46      	ldr	r2, [pc, #280]	@ (80032cc <TIM_Base_SetConfig+0x12c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031be:	d00f      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a43      	ldr	r2, [pc, #268]	@ (80032d0 <TIM_Base_SetConfig+0x130>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a42      	ldr	r2, [pc, #264]	@ (80032d4 <TIM_Base_SetConfig+0x134>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a41      	ldr	r2, [pc, #260]	@ (80032d8 <TIM_Base_SetConfig+0x138>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a40      	ldr	r2, [pc, #256]	@ (80032dc <TIM_Base_SetConfig+0x13c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d108      	bne.n	80031f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a35      	ldr	r2, [pc, #212]	@ (80032cc <TIM_Base_SetConfig+0x12c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d02b      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003200:	d027      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a32      	ldr	r2, [pc, #200]	@ (80032d0 <TIM_Base_SetConfig+0x130>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d023      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a31      	ldr	r2, [pc, #196]	@ (80032d4 <TIM_Base_SetConfig+0x134>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01f      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a30      	ldr	r2, [pc, #192]	@ (80032d8 <TIM_Base_SetConfig+0x138>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01b      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2f      	ldr	r2, [pc, #188]	@ (80032dc <TIM_Base_SetConfig+0x13c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d017      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2e      	ldr	r2, [pc, #184]	@ (80032e0 <TIM_Base_SetConfig+0x140>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2d      	ldr	r2, [pc, #180]	@ (80032e4 <TIM_Base_SetConfig+0x144>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00f      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2c      	ldr	r2, [pc, #176]	@ (80032e8 <TIM_Base_SetConfig+0x148>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00b      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2b      	ldr	r2, [pc, #172]	@ (80032ec <TIM_Base_SetConfig+0x14c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a2a      	ldr	r2, [pc, #168]	@ (80032f0 <TIM_Base_SetConfig+0x150>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a29      	ldr	r2, [pc, #164]	@ (80032f4 <TIM_Base_SetConfig+0x154>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d108      	bne.n	8003264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <TIM_Base_SetConfig+0x12c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0xf8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a12      	ldr	r2, [pc, #72]	@ (80032dc <TIM_Base_SetConfig+0x13c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d103      	bne.n	80032a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d105      	bne.n	80032be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f023 0201 	bic.w	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]
  }
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	40010400 	.word	0x40010400
 80032e0:	40014000 	.word	0x40014000
 80032e4:	40014400 	.word	0x40014400
 80032e8:	40014800 	.word	0x40014800
 80032ec:	40001800 	.word	0x40001800
 80032f0:	40001c00 	.word	0x40001c00
 80032f4:	40002000 	.word	0x40002000

080032f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f023 0201 	bic.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 0302 	bic.w	r3, r3, #2
 8003340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a20      	ldr	r2, [pc, #128]	@ (80033d0 <TIM_OC1_SetConfig+0xd8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_OC1_SetConfig+0x64>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a1f      	ldr	r2, [pc, #124]	@ (80033d4 <TIM_OC1_SetConfig+0xdc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d10c      	bne.n	8003376 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0308 	bic.w	r3, r3, #8
 8003362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <TIM_OC1_SetConfig+0xd8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_OC1_SetConfig+0x8e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <TIM_OC1_SetConfig+0xdc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d111      	bne.n	80033aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800338c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40010400 	.word	0x40010400

080033d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 0210 	bic.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800340e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0320 	bic.w	r3, r3, #32
 8003422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a22      	ldr	r2, [pc, #136]	@ (80034bc <TIM_OC2_SetConfig+0xe4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_OC2_SetConfig+0x68>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a21      	ldr	r2, [pc, #132]	@ (80034c0 <TIM_OC2_SetConfig+0xe8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10d      	bne.n	800345c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800345a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <TIM_OC2_SetConfig+0xe4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_OC2_SetConfig+0x94>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <TIM_OC2_SetConfig+0xe8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d113      	bne.n	8003494 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800347a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40010400 	.word	0x40010400

080034c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0303 	bic.w	r3, r3, #3
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800350c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <TIM_OC3_SetConfig+0xe0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d003      	beq.n	800352a <TIM_OC3_SetConfig+0x66>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a20      	ldr	r2, [pc, #128]	@ (80035a8 <TIM_OC3_SetConfig+0xe4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10d      	bne.n	8003546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <TIM_OC3_SetConfig+0xe0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_OC3_SetConfig+0x92>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a15      	ldr	r2, [pc, #84]	@ (80035a8 <TIM_OC3_SetConfig+0xe4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d113      	bne.n	800357e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800355c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40010400 	.word	0x40010400

080035ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	031b      	lsls	r3, r3, #12
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a12      	ldr	r2, [pc, #72]	@ (8003650 <TIM_OC4_SetConfig+0xa4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_OC4_SetConfig+0x68>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a11      	ldr	r2, [pc, #68]	@ (8003654 <TIM_OC4_SetConfig+0xa8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d109      	bne.n	8003628 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800361a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	019b      	lsls	r3, r3, #6
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40010400 	.word	0x40010400

08003658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f023 0201 	bic.w	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 030a 	bic.w	r3, r3, #10
 8003694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b087      	sub	sp, #28
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f023 0210 	bic.w	r2, r3, #16
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	031b      	lsls	r3, r3, #12
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	f043 0307 	orr.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	431a      	orrs	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e05a      	b.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a21      	ldr	r2, [pc, #132]	@ (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d022      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d01d      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1d      	ldr	r2, [pc, #116]	@ (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d018      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1b      	ldr	r2, [pc, #108]	@ (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1a      	ldr	r2, [pc, #104]	@ (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00e      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a18      	ldr	r2, [pc, #96]	@ (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a17      	ldr	r2, [pc, #92]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a15      	ldr	r2, [pc, #84]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10c      	bne.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	4313      	orrs	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40010000 	.word	0x40010000
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	40010400 	.word	0x40010400
 80038c8:	40014000 	.word	0x40014000
 80038cc:	40001800 	.word	0x40001800

080038d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e03d      	b.n	8003968 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e042      	b.n	8003a0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fa84 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	@ 0x24
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f973 	bl	8003ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	@ 0x28
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d175      	bne.n	8003b20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Transmit+0x2c>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e06e      	b.n	8003b22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2221      	movs	r2, #33	@ 0x21
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a52:	f7fd fb83 	bl	800115c <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6c:	d108      	bne.n	8003a80 <HAL_UART_Transmit+0x6c>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e003      	b.n	8003a88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a88:	e02e      	b.n	8003ae8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	@ 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f848 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e03a      	b.n	8003b22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	e007      	b.n	8003ada <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1cb      	bne.n	8003a8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2140      	movs	r1, #64	@ 0x40
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f814 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e006      	b.n	8003b22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3a:	e03b      	b.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b42:	d037      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b44:	f7fd fb0a 	bl	800115c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d302      	bcc.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e03a      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d023      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b80      	cmp	r3, #128	@ 0x80
 8003b70:	d020      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d01d      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d116      	bne.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f81d 	bl	8003bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e00f      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d0b4      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b095      	sub	sp, #84	@ 0x54
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c04:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d119      	bne.n	8003c88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 0310 	bic.w	r3, r3, #16
 8003c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c74:	61ba      	str	r2, [r7, #24]
 8003c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	613b      	str	r3, [r7, #16]
   return(result);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c96:	bf00      	nop
 8003c98:	3754      	adds	r7, #84	@ 0x54
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca8:	b0c0      	sub	sp, #256	@ 0x100
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	68d9      	ldr	r1, [r3, #12]
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	ea40 0301 	orr.w	r3, r0, r1
 8003ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cfc:	f021 010c 	bic.w	r1, r1, #12
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1e:	6999      	ldr	r1, [r3, #24]
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	ea40 0301 	orr.w	r3, r0, r1
 8003d2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b8f      	ldr	r3, [pc, #572]	@ (8003f70 <UART_SetConfig+0x2cc>)
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d005      	beq.n	8003d44 <UART_SetConfig+0xa0>
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f74 <UART_SetConfig+0x2d0>)
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d104      	bne.n	8003d4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7fe feae 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8003d48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d4c:	e003      	b.n	8003d56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d4e:	f7fe fe95 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8003d52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d60:	f040 810c 	bne.w	8003f7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d76:	4622      	mov	r2, r4
 8003d78:	462b      	mov	r3, r5
 8003d7a:	1891      	adds	r1, r2, r2
 8003d7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d7e:	415b      	adcs	r3, r3
 8003d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d86:	4621      	mov	r1, r4
 8003d88:	eb12 0801 	adds.w	r8, r2, r1
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	eb43 0901 	adc.w	r9, r3, r1
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003da6:	4690      	mov	r8, r2
 8003da8:	4699      	mov	r9, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	eb18 0303 	adds.w	r3, r8, r3
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003db4:	462b      	mov	r3, r5
 8003db6:	eb49 0303 	adc.w	r3, r9, r3
 8003dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	18db      	adds	r3, r3, r3
 8003dd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dd8:	4613      	mov	r3, r2
 8003dda:	eb42 0303 	adc.w	r3, r2, r3
 8003dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8003de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003de4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003de8:	f7fc fa4a 	bl	8000280 <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4b61      	ldr	r3, [pc, #388]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003df2:	fba3 2302 	umull	r2, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	011c      	lsls	r4, r3, #4
 8003dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	1891      	adds	r1, r2, r2
 8003e12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e14:	415b      	adcs	r3, r3
 8003e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e22:	4649      	mov	r1, r9
 8003e24:	eb43 0b01 	adc.w	fp, r3, r1
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e3c:	4692      	mov	sl, r2
 8003e3e:	469b      	mov	fp, r3
 8003e40:	4643      	mov	r3, r8
 8003e42:	eb1a 0303 	adds.w	r3, sl, r3
 8003e46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	18db      	adds	r3, r3, r3
 8003e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e6e:	4613      	mov	r3, r2
 8003e70:	eb42 0303 	adc.w	r3, r2, r3
 8003e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e7e:	f7fc f9ff 	bl	8000280 <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2264      	movs	r2, #100	@ 0x64
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	1acb      	subs	r3, r1, r3
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e9e:	4b36      	ldr	r3, [pc, #216]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003ea0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003eac:	441c      	add	r4, r3
 8003eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ebc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	1891      	adds	r1, r2, r2
 8003ec6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ec8:	415b      	adcs	r3, r3
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	1851      	adds	r1, r2, r1
 8003ed4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	414b      	adcs	r3, r1
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ee8:	4659      	mov	r1, fp
 8003eea:	00cb      	lsls	r3, r1, #3
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	00ca      	lsls	r2, r1, #3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	4642      	mov	r2, r8
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f04:	464b      	mov	r3, r9
 8003f06:	460a      	mov	r2, r1
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f24:	460b      	mov	r3, r1
 8003f26:	18db      	adds	r3, r3, r3
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	eb42 0303 	adc.w	r3, r2, r3
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f3a:	f7fc f9a1 	bl	8000280 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003f44:	fba3 1302 	umull	r1, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	2164      	movs	r1, #100	@ 0x64
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	3332      	adds	r3, #50	@ 0x32
 8003f56:	4a08      	ldr	r2, [pc, #32]	@ (8003f78 <UART_SetConfig+0x2d4>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	f003 0207 	and.w	r2, r3, #7
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4422      	add	r2, r4
 8003f6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f6c:	e106      	b.n	800417c <UART_SetConfig+0x4d8>
 8003f6e:	bf00      	nop
 8003f70:	40011000 	.word	0x40011000
 8003f74:	40011400 	.word	0x40011400
 8003f78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f8e:	4642      	mov	r2, r8
 8003f90:	464b      	mov	r3, r9
 8003f92:	1891      	adds	r1, r2, r2
 8003f94:	6239      	str	r1, [r7, #32]
 8003f96:	415b      	adcs	r3, r3
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	1854      	adds	r4, r2, r1
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	eb43 0501 	adc.w	r5, r3, r1
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	00eb      	lsls	r3, r5, #3
 8003fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fb6:	00e2      	lsls	r2, r4, #3
 8003fb8:	4614      	mov	r4, r2
 8003fba:	461d      	mov	r5, r3
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	18e3      	adds	r3, r4, r3
 8003fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	eb45 0303 	adc.w	r3, r5, r3
 8003fca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fea:	4629      	mov	r1, r5
 8003fec:	008b      	lsls	r3, r1, #2
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	008a      	lsls	r2, r1, #2
 8003ff8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ffc:	f7fc f940 	bl	8000280 <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4b60      	ldr	r3, [pc, #384]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004006:	fba3 2302 	umull	r2, r3, r3, r2
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	011c      	lsls	r4, r3, #4
 800400e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004018:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800401c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004020:	4642      	mov	r2, r8
 8004022:	464b      	mov	r3, r9
 8004024:	1891      	adds	r1, r2, r2
 8004026:	61b9      	str	r1, [r7, #24]
 8004028:	415b      	adcs	r3, r3
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004030:	4641      	mov	r1, r8
 8004032:	1851      	adds	r1, r2, r1
 8004034:	6139      	str	r1, [r7, #16]
 8004036:	4649      	mov	r1, r9
 8004038:	414b      	adcs	r3, r1
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004048:	4659      	mov	r1, fp
 800404a:	00cb      	lsls	r3, r1, #3
 800404c:	4651      	mov	r1, sl
 800404e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004052:	4651      	mov	r1, sl
 8004054:	00ca      	lsls	r2, r1, #3
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	4603      	mov	r3, r0
 800405c:	4642      	mov	r2, r8
 800405e:	189b      	adds	r3, r3, r2
 8004060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004064:	464b      	mov	r3, r9
 8004066:	460a      	mov	r2, r1
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	67bb      	str	r3, [r7, #120]	@ 0x78
 800407a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004088:	4649      	mov	r1, r9
 800408a:	008b      	lsls	r3, r1, #2
 800408c:	4641      	mov	r1, r8
 800408e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004092:	4641      	mov	r1, r8
 8004094:	008a      	lsls	r2, r1, #2
 8004096:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800409a:	f7fc f8f1 	bl	8000280 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2301 	umull	r2, r3, r3, r1
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2264      	movs	r2, #100	@ 0x64
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	@ 0x32
 80040b8:	4a33      	ldr	r2, [pc, #204]	@ (8004188 <UART_SetConfig+0x4e4>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c4:	441c      	add	r4, r3
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80040ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80040d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040d4:	4642      	mov	r2, r8
 80040d6:	464b      	mov	r3, r9
 80040d8:	1891      	adds	r1, r2, r2
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	415b      	adcs	r3, r3
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e4:	4641      	mov	r1, r8
 80040e6:	1851      	adds	r1, r2, r1
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	4649      	mov	r1, r9
 80040ec:	414b      	adcs	r3, r1
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040fc:	4659      	mov	r1, fp
 80040fe:	00cb      	lsls	r3, r1, #3
 8004100:	4651      	mov	r1, sl
 8004102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004106:	4651      	mov	r1, sl
 8004108:	00ca      	lsls	r2, r1, #3
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	4603      	mov	r3, r0
 8004110:	4642      	mov	r2, r8
 8004112:	189b      	adds	r3, r3, r2
 8004114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004116:	464b      	mov	r3, r9
 8004118:	460a      	mov	r2, r1
 800411a:	eb42 0303 	adc.w	r3, r2, r3
 800411e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	663b      	str	r3, [r7, #96]	@ 0x60
 800412a:	667a      	str	r2, [r7, #100]	@ 0x64
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004138:	4649      	mov	r1, r9
 800413a:	008b      	lsls	r3, r1, #2
 800413c:	4641      	mov	r1, r8
 800413e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004142:	4641      	mov	r1, r8
 8004144:	008a      	lsls	r2, r1, #2
 8004146:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800414a:	f7fc f899 	bl	8000280 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004154:	fba3 1302 	umull	r1, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2164      	movs	r1, #100	@ 0x64
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	3332      	adds	r3, #50	@ 0x32
 8004166:	4a08      	ldr	r2, [pc, #32]	@ (8004188 <UART_SetConfig+0x4e4>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4422      	add	r2, r4
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004188:	51eb851f 	.word	0x51eb851f

0800418c <siprintf>:
 800418c:	b40e      	push	{r1, r2, r3}
 800418e:	b500      	push	{lr}
 8004190:	b09c      	sub	sp, #112	@ 0x70
 8004192:	ab1d      	add	r3, sp, #116	@ 0x74
 8004194:	9002      	str	r0, [sp, #8]
 8004196:	9006      	str	r0, [sp, #24]
 8004198:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800419c:	4809      	ldr	r0, [pc, #36]	@ (80041c4 <siprintf+0x38>)
 800419e:	9107      	str	r1, [sp, #28]
 80041a0:	9104      	str	r1, [sp, #16]
 80041a2:	4909      	ldr	r1, [pc, #36]	@ (80041c8 <siprintf+0x3c>)
 80041a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041a8:	9105      	str	r1, [sp, #20]
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	a902      	add	r1, sp, #8
 80041b0:	f000 f994 	bl	80044dc <_svfiprintf_r>
 80041b4:	9b02      	ldr	r3, [sp, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	b01c      	add	sp, #112	@ 0x70
 80041bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80041c0:	b003      	add	sp, #12
 80041c2:	4770      	bx	lr
 80041c4:	20000070 	.word	0x20000070
 80041c8:	ffff0208 	.word	0xffff0208

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	@ (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000070 	.word	0x20000070

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004220 <__libc_init_array+0x38>)
 80041ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004224 <__libc_init_array+0x3c>)
 80041ee:	1b64      	subs	r4, r4, r5
 80041f0:	10a4      	asrs	r4, r4, #2
 80041f2:	2600      	movs	r6, #0
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004228 <__libc_init_array+0x40>)
 80041fa:	4c0c      	ldr	r4, [pc, #48]	@ (800422c <__libc_init_array+0x44>)
 80041fc:	f000 fc66 	bl	8004acc <_init>
 8004200:	1b64      	subs	r4, r4, r5
 8004202:	10a4      	asrs	r4, r4, #2
 8004204:	2600      	movs	r6, #0
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	f855 3b04 	ldr.w	r3, [r5], #4
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	08004c0c 	.word	0x08004c0c
 8004224:	08004c0c 	.word	0x08004c0c
 8004228:	08004c0c 	.word	0x08004c0c
 800422c:	08004c10 	.word	0x08004c10

08004230 <__retarget_lock_acquire_recursive>:
 8004230:	4770      	bx	lr

08004232 <__retarget_lock_release_recursive>:
 8004232:	4770      	bx	lr

08004234 <_free_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4605      	mov	r5, r0
 8004238:	2900      	cmp	r1, #0
 800423a:	d041      	beq.n	80042c0 <_free_r+0x8c>
 800423c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004240:	1f0c      	subs	r4, r1, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfb8      	it	lt
 8004246:	18e4      	addlt	r4, r4, r3
 8004248:	f000 f8e0 	bl	800440c <__malloc_lock>
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <_free_r+0x90>)
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	b933      	cbnz	r3, 8004260 <_free_r+0x2c>
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	6014      	str	r4, [r2, #0]
 8004256:	4628      	mov	r0, r5
 8004258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800425c:	f000 b8dc 	b.w	8004418 <__malloc_unlock>
 8004260:	42a3      	cmp	r3, r4
 8004262:	d908      	bls.n	8004276 <_free_r+0x42>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	1821      	adds	r1, r4, r0
 8004268:	428b      	cmp	r3, r1
 800426a:	bf01      	itttt	eq
 800426c:	6819      	ldreq	r1, [r3, #0]
 800426e:	685b      	ldreq	r3, [r3, #4]
 8004270:	1809      	addeq	r1, r1, r0
 8004272:	6021      	streq	r1, [r4, #0]
 8004274:	e7ed      	b.n	8004252 <_free_r+0x1e>
 8004276:	461a      	mov	r2, r3
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	b10b      	cbz	r3, 8004280 <_free_r+0x4c>
 800427c:	42a3      	cmp	r3, r4
 800427e:	d9fa      	bls.n	8004276 <_free_r+0x42>
 8004280:	6811      	ldr	r1, [r2, #0]
 8004282:	1850      	adds	r0, r2, r1
 8004284:	42a0      	cmp	r0, r4
 8004286:	d10b      	bne.n	80042a0 <_free_r+0x6c>
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	4401      	add	r1, r0
 800428c:	1850      	adds	r0, r2, r1
 800428e:	4283      	cmp	r3, r0
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	d1e0      	bne.n	8004256 <_free_r+0x22>
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	4408      	add	r0, r1
 800429c:	6010      	str	r0, [r2, #0]
 800429e:	e7da      	b.n	8004256 <_free_r+0x22>
 80042a0:	d902      	bls.n	80042a8 <_free_r+0x74>
 80042a2:	230c      	movs	r3, #12
 80042a4:	602b      	str	r3, [r5, #0]
 80042a6:	e7d6      	b.n	8004256 <_free_r+0x22>
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	1821      	adds	r1, r4, r0
 80042ac:	428b      	cmp	r3, r1
 80042ae:	bf04      	itt	eq
 80042b0:	6819      	ldreq	r1, [r3, #0]
 80042b2:	685b      	ldreq	r3, [r3, #4]
 80042b4:	6063      	str	r3, [r4, #4]
 80042b6:	bf04      	itt	eq
 80042b8:	1809      	addeq	r1, r1, r0
 80042ba:	6021      	streq	r1, [r4, #0]
 80042bc:	6054      	str	r4, [r2, #4]
 80042be:	e7ca      	b.n	8004256 <_free_r+0x22>
 80042c0:	bd38      	pop	{r3, r4, r5, pc}
 80042c2:	bf00      	nop
 80042c4:	2000035c 	.word	0x2000035c

080042c8 <sbrk_aligned>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004308 <sbrk_aligned+0x40>)
 80042cc:	460c      	mov	r4, r1
 80042ce:	6831      	ldr	r1, [r6, #0]
 80042d0:	4605      	mov	r5, r0
 80042d2:	b911      	cbnz	r1, 80042da <sbrk_aligned+0x12>
 80042d4:	f000 fba6 	bl	8004a24 <_sbrk_r>
 80042d8:	6030      	str	r0, [r6, #0]
 80042da:	4621      	mov	r1, r4
 80042dc:	4628      	mov	r0, r5
 80042de:	f000 fba1 	bl	8004a24 <_sbrk_r>
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	d103      	bne.n	80042ee <sbrk_aligned+0x26>
 80042e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80042ea:	4620      	mov	r0, r4
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
 80042ee:	1cc4      	adds	r4, r0, #3
 80042f0:	f024 0403 	bic.w	r4, r4, #3
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d0f8      	beq.n	80042ea <sbrk_aligned+0x22>
 80042f8:	1a21      	subs	r1, r4, r0
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 fb92 	bl	8004a24 <_sbrk_r>
 8004300:	3001      	adds	r0, #1
 8004302:	d1f2      	bne.n	80042ea <sbrk_aligned+0x22>
 8004304:	e7ef      	b.n	80042e6 <sbrk_aligned+0x1e>
 8004306:	bf00      	nop
 8004308:	20000358 	.word	0x20000358

0800430c <_malloc_r>:
 800430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004310:	1ccd      	adds	r5, r1, #3
 8004312:	f025 0503 	bic.w	r5, r5, #3
 8004316:	3508      	adds	r5, #8
 8004318:	2d0c      	cmp	r5, #12
 800431a:	bf38      	it	cc
 800431c:	250c      	movcc	r5, #12
 800431e:	2d00      	cmp	r5, #0
 8004320:	4606      	mov	r6, r0
 8004322:	db01      	blt.n	8004328 <_malloc_r+0x1c>
 8004324:	42a9      	cmp	r1, r5
 8004326:	d904      	bls.n	8004332 <_malloc_r+0x26>
 8004328:	230c      	movs	r3, #12
 800432a:	6033      	str	r3, [r6, #0]
 800432c:	2000      	movs	r0, #0
 800432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004408 <_malloc_r+0xfc>
 8004336:	f000 f869 	bl	800440c <__malloc_lock>
 800433a:	f8d8 3000 	ldr.w	r3, [r8]
 800433e:	461c      	mov	r4, r3
 8004340:	bb44      	cbnz	r4, 8004394 <_malloc_r+0x88>
 8004342:	4629      	mov	r1, r5
 8004344:	4630      	mov	r0, r6
 8004346:	f7ff ffbf 	bl	80042c8 <sbrk_aligned>
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	4604      	mov	r4, r0
 800434e:	d158      	bne.n	8004402 <_malloc_r+0xf6>
 8004350:	f8d8 4000 	ldr.w	r4, [r8]
 8004354:	4627      	mov	r7, r4
 8004356:	2f00      	cmp	r7, #0
 8004358:	d143      	bne.n	80043e2 <_malloc_r+0xd6>
 800435a:	2c00      	cmp	r4, #0
 800435c:	d04b      	beq.n	80043f6 <_malloc_r+0xea>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	4639      	mov	r1, r7
 8004362:	4630      	mov	r0, r6
 8004364:	eb04 0903 	add.w	r9, r4, r3
 8004368:	f000 fb5c 	bl	8004a24 <_sbrk_r>
 800436c:	4581      	cmp	r9, r0
 800436e:	d142      	bne.n	80043f6 <_malloc_r+0xea>
 8004370:	6821      	ldr	r1, [r4, #0]
 8004372:	1a6d      	subs	r5, r5, r1
 8004374:	4629      	mov	r1, r5
 8004376:	4630      	mov	r0, r6
 8004378:	f7ff ffa6 	bl	80042c8 <sbrk_aligned>
 800437c:	3001      	adds	r0, #1
 800437e:	d03a      	beq.n	80043f6 <_malloc_r+0xea>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	442b      	add	r3, r5
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	f8d8 3000 	ldr.w	r3, [r8]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	bb62      	cbnz	r2, 80043e8 <_malloc_r+0xdc>
 800438e:	f8c8 7000 	str.w	r7, [r8]
 8004392:	e00f      	b.n	80043b4 <_malloc_r+0xa8>
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	1b52      	subs	r2, r2, r5
 8004398:	d420      	bmi.n	80043dc <_malloc_r+0xd0>
 800439a:	2a0b      	cmp	r2, #11
 800439c:	d917      	bls.n	80043ce <_malloc_r+0xc2>
 800439e:	1961      	adds	r1, r4, r5
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	6025      	str	r5, [r4, #0]
 80043a4:	bf18      	it	ne
 80043a6:	6059      	strne	r1, [r3, #4]
 80043a8:	6863      	ldr	r3, [r4, #4]
 80043aa:	bf08      	it	eq
 80043ac:	f8c8 1000 	streq.w	r1, [r8]
 80043b0:	5162      	str	r2, [r4, r5]
 80043b2:	604b      	str	r3, [r1, #4]
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f82f 	bl	8004418 <__malloc_unlock>
 80043ba:	f104 000b 	add.w	r0, r4, #11
 80043be:	1d23      	adds	r3, r4, #4
 80043c0:	f020 0007 	bic.w	r0, r0, #7
 80043c4:	1ac2      	subs	r2, r0, r3
 80043c6:	bf1c      	itt	ne
 80043c8:	1a1b      	subne	r3, r3, r0
 80043ca:	50a3      	strne	r3, [r4, r2]
 80043cc:	e7af      	b.n	800432e <_malloc_r+0x22>
 80043ce:	6862      	ldr	r2, [r4, #4]
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	bf0c      	ite	eq
 80043d4:	f8c8 2000 	streq.w	r2, [r8]
 80043d8:	605a      	strne	r2, [r3, #4]
 80043da:	e7eb      	b.n	80043b4 <_malloc_r+0xa8>
 80043dc:	4623      	mov	r3, r4
 80043de:	6864      	ldr	r4, [r4, #4]
 80043e0:	e7ae      	b.n	8004340 <_malloc_r+0x34>
 80043e2:	463c      	mov	r4, r7
 80043e4:	687f      	ldr	r7, [r7, #4]
 80043e6:	e7b6      	b.n	8004356 <_malloc_r+0x4a>
 80043e8:	461a      	mov	r2, r3
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	d1fb      	bne.n	80043e8 <_malloc_r+0xdc>
 80043f0:	2300      	movs	r3, #0
 80043f2:	6053      	str	r3, [r2, #4]
 80043f4:	e7de      	b.n	80043b4 <_malloc_r+0xa8>
 80043f6:	230c      	movs	r3, #12
 80043f8:	6033      	str	r3, [r6, #0]
 80043fa:	4630      	mov	r0, r6
 80043fc:	f000 f80c 	bl	8004418 <__malloc_unlock>
 8004400:	e794      	b.n	800432c <_malloc_r+0x20>
 8004402:	6005      	str	r5, [r0, #0]
 8004404:	e7d6      	b.n	80043b4 <_malloc_r+0xa8>
 8004406:	bf00      	nop
 8004408:	2000035c 	.word	0x2000035c

0800440c <__malloc_lock>:
 800440c:	4801      	ldr	r0, [pc, #4]	@ (8004414 <__malloc_lock+0x8>)
 800440e:	f7ff bf0f 	b.w	8004230 <__retarget_lock_acquire_recursive>
 8004412:	bf00      	nop
 8004414:	20000354 	.word	0x20000354

08004418 <__malloc_unlock>:
 8004418:	4801      	ldr	r0, [pc, #4]	@ (8004420 <__malloc_unlock+0x8>)
 800441a:	f7ff bf0a 	b.w	8004232 <__retarget_lock_release_recursive>
 800441e:	bf00      	nop
 8004420:	20000354 	.word	0x20000354

08004424 <__ssputs_r>:
 8004424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004428:	688e      	ldr	r6, [r1, #8]
 800442a:	461f      	mov	r7, r3
 800442c:	42be      	cmp	r6, r7
 800442e:	680b      	ldr	r3, [r1, #0]
 8004430:	4682      	mov	sl, r0
 8004432:	460c      	mov	r4, r1
 8004434:	4690      	mov	r8, r2
 8004436:	d82d      	bhi.n	8004494 <__ssputs_r+0x70>
 8004438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800443c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004440:	d026      	beq.n	8004490 <__ssputs_r+0x6c>
 8004442:	6965      	ldr	r5, [r4, #20]
 8004444:	6909      	ldr	r1, [r1, #16]
 8004446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800444a:	eba3 0901 	sub.w	r9, r3, r1
 800444e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004452:	1c7b      	adds	r3, r7, #1
 8004454:	444b      	add	r3, r9
 8004456:	106d      	asrs	r5, r5, #1
 8004458:	429d      	cmp	r5, r3
 800445a:	bf38      	it	cc
 800445c:	461d      	movcc	r5, r3
 800445e:	0553      	lsls	r3, r2, #21
 8004460:	d527      	bpl.n	80044b2 <__ssputs_r+0x8e>
 8004462:	4629      	mov	r1, r5
 8004464:	f7ff ff52 	bl	800430c <_malloc_r>
 8004468:	4606      	mov	r6, r0
 800446a:	b360      	cbz	r0, 80044c6 <__ssputs_r+0xa2>
 800446c:	6921      	ldr	r1, [r4, #16]
 800446e:	464a      	mov	r2, r9
 8004470:	f000 fae8 	bl	8004a44 <memcpy>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800447a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	6126      	str	r6, [r4, #16]
 8004482:	6165      	str	r5, [r4, #20]
 8004484:	444e      	add	r6, r9
 8004486:	eba5 0509 	sub.w	r5, r5, r9
 800448a:	6026      	str	r6, [r4, #0]
 800448c:	60a5      	str	r5, [r4, #8]
 800448e:	463e      	mov	r6, r7
 8004490:	42be      	cmp	r6, r7
 8004492:	d900      	bls.n	8004496 <__ssputs_r+0x72>
 8004494:	463e      	mov	r6, r7
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	4632      	mov	r2, r6
 800449a:	4641      	mov	r1, r8
 800449c:	f000 faa8 	bl	80049f0 <memmove>
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	1b9b      	subs	r3, r3, r6
 80044a4:	60a3      	str	r3, [r4, #8]
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	4433      	add	r3, r6
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	2000      	movs	r0, #0
 80044ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b2:	462a      	mov	r2, r5
 80044b4:	f000 fad4 	bl	8004a60 <_realloc_r>
 80044b8:	4606      	mov	r6, r0
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d1e0      	bne.n	8004480 <__ssputs_r+0x5c>
 80044be:	6921      	ldr	r1, [r4, #16]
 80044c0:	4650      	mov	r0, sl
 80044c2:	f7ff feb7 	bl	8004234 <_free_r>
 80044c6:	230c      	movs	r3, #12
 80044c8:	f8ca 3000 	str.w	r3, [sl]
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044d8:	e7e9      	b.n	80044ae <__ssputs_r+0x8a>
	...

080044dc <_svfiprintf_r>:
 80044dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e0:	4698      	mov	r8, r3
 80044e2:	898b      	ldrh	r3, [r1, #12]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	b09d      	sub	sp, #116	@ 0x74
 80044e8:	4607      	mov	r7, r0
 80044ea:	460d      	mov	r5, r1
 80044ec:	4614      	mov	r4, r2
 80044ee:	d510      	bpl.n	8004512 <_svfiprintf_r+0x36>
 80044f0:	690b      	ldr	r3, [r1, #16]
 80044f2:	b973      	cbnz	r3, 8004512 <_svfiprintf_r+0x36>
 80044f4:	2140      	movs	r1, #64	@ 0x40
 80044f6:	f7ff ff09 	bl	800430c <_malloc_r>
 80044fa:	6028      	str	r0, [r5, #0]
 80044fc:	6128      	str	r0, [r5, #16]
 80044fe:	b930      	cbnz	r0, 800450e <_svfiprintf_r+0x32>
 8004500:	230c      	movs	r3, #12
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004508:	b01d      	add	sp, #116	@ 0x74
 800450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450e:	2340      	movs	r3, #64	@ 0x40
 8004510:	616b      	str	r3, [r5, #20]
 8004512:	2300      	movs	r3, #0
 8004514:	9309      	str	r3, [sp, #36]	@ 0x24
 8004516:	2320      	movs	r3, #32
 8004518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800451c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004520:	2330      	movs	r3, #48	@ 0x30
 8004522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80046c0 <_svfiprintf_r+0x1e4>
 8004526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800452a:	f04f 0901 	mov.w	r9, #1
 800452e:	4623      	mov	r3, r4
 8004530:	469a      	mov	sl, r3
 8004532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004536:	b10a      	cbz	r2, 800453c <_svfiprintf_r+0x60>
 8004538:	2a25      	cmp	r2, #37	@ 0x25
 800453a:	d1f9      	bne.n	8004530 <_svfiprintf_r+0x54>
 800453c:	ebba 0b04 	subs.w	fp, sl, r4
 8004540:	d00b      	beq.n	800455a <_svfiprintf_r+0x7e>
 8004542:	465b      	mov	r3, fp
 8004544:	4622      	mov	r2, r4
 8004546:	4629      	mov	r1, r5
 8004548:	4638      	mov	r0, r7
 800454a:	f7ff ff6b 	bl	8004424 <__ssputs_r>
 800454e:	3001      	adds	r0, #1
 8004550:	f000 80a7 	beq.w	80046a2 <_svfiprintf_r+0x1c6>
 8004554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004556:	445a      	add	r2, fp
 8004558:	9209      	str	r2, [sp, #36]	@ 0x24
 800455a:	f89a 3000 	ldrb.w	r3, [sl]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 809f 	beq.w	80046a2 <_svfiprintf_r+0x1c6>
 8004564:	2300      	movs	r3, #0
 8004566:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800456a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800456e:	f10a 0a01 	add.w	sl, sl, #1
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	9307      	str	r3, [sp, #28]
 8004576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800457a:	931a      	str	r3, [sp, #104]	@ 0x68
 800457c:	4654      	mov	r4, sl
 800457e:	2205      	movs	r2, #5
 8004580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004584:	484e      	ldr	r0, [pc, #312]	@ (80046c0 <_svfiprintf_r+0x1e4>)
 8004586:	f7fb fe2b 	bl	80001e0 <memchr>
 800458a:	9a04      	ldr	r2, [sp, #16]
 800458c:	b9d8      	cbnz	r0, 80045c6 <_svfiprintf_r+0xea>
 800458e:	06d0      	lsls	r0, r2, #27
 8004590:	bf44      	itt	mi
 8004592:	2320      	movmi	r3, #32
 8004594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004598:	0711      	lsls	r1, r2, #28
 800459a:	bf44      	itt	mi
 800459c:	232b      	movmi	r3, #43	@ 0x2b
 800459e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045a2:	f89a 3000 	ldrb.w	r3, [sl]
 80045a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045a8:	d015      	beq.n	80045d6 <_svfiprintf_r+0xfa>
 80045aa:	9a07      	ldr	r2, [sp, #28]
 80045ac:	4654      	mov	r4, sl
 80045ae:	2000      	movs	r0, #0
 80045b0:	f04f 0c0a 	mov.w	ip, #10
 80045b4:	4621      	mov	r1, r4
 80045b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ba:	3b30      	subs	r3, #48	@ 0x30
 80045bc:	2b09      	cmp	r3, #9
 80045be:	d94b      	bls.n	8004658 <_svfiprintf_r+0x17c>
 80045c0:	b1b0      	cbz	r0, 80045f0 <_svfiprintf_r+0x114>
 80045c2:	9207      	str	r2, [sp, #28]
 80045c4:	e014      	b.n	80045f0 <_svfiprintf_r+0x114>
 80045c6:	eba0 0308 	sub.w	r3, r0, r8
 80045ca:	fa09 f303 	lsl.w	r3, r9, r3
 80045ce:	4313      	orrs	r3, r2
 80045d0:	9304      	str	r3, [sp, #16]
 80045d2:	46a2      	mov	sl, r4
 80045d4:	e7d2      	b.n	800457c <_svfiprintf_r+0xa0>
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	1d19      	adds	r1, r3, #4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	9103      	str	r1, [sp, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bfbb      	ittet	lt
 80045e2:	425b      	neglt	r3, r3
 80045e4:	f042 0202 	orrlt.w	r2, r2, #2
 80045e8:	9307      	strge	r3, [sp, #28]
 80045ea:	9307      	strlt	r3, [sp, #28]
 80045ec:	bfb8      	it	lt
 80045ee:	9204      	strlt	r2, [sp, #16]
 80045f0:	7823      	ldrb	r3, [r4, #0]
 80045f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045f4:	d10a      	bne.n	800460c <_svfiprintf_r+0x130>
 80045f6:	7863      	ldrb	r3, [r4, #1]
 80045f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045fa:	d132      	bne.n	8004662 <_svfiprintf_r+0x186>
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	9203      	str	r2, [sp, #12]
 8004604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004608:	3402      	adds	r4, #2
 800460a:	9305      	str	r3, [sp, #20]
 800460c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046d0 <_svfiprintf_r+0x1f4>
 8004610:	7821      	ldrb	r1, [r4, #0]
 8004612:	2203      	movs	r2, #3
 8004614:	4650      	mov	r0, sl
 8004616:	f7fb fde3 	bl	80001e0 <memchr>
 800461a:	b138      	cbz	r0, 800462c <_svfiprintf_r+0x150>
 800461c:	9b04      	ldr	r3, [sp, #16]
 800461e:	eba0 000a 	sub.w	r0, r0, sl
 8004622:	2240      	movs	r2, #64	@ 0x40
 8004624:	4082      	lsls	r2, r0
 8004626:	4313      	orrs	r3, r2
 8004628:	3401      	adds	r4, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004630:	4824      	ldr	r0, [pc, #144]	@ (80046c4 <_svfiprintf_r+0x1e8>)
 8004632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004636:	2206      	movs	r2, #6
 8004638:	f7fb fdd2 	bl	80001e0 <memchr>
 800463c:	2800      	cmp	r0, #0
 800463e:	d036      	beq.n	80046ae <_svfiprintf_r+0x1d2>
 8004640:	4b21      	ldr	r3, [pc, #132]	@ (80046c8 <_svfiprintf_r+0x1ec>)
 8004642:	bb1b      	cbnz	r3, 800468c <_svfiprintf_r+0x1b0>
 8004644:	9b03      	ldr	r3, [sp, #12]
 8004646:	3307      	adds	r3, #7
 8004648:	f023 0307 	bic.w	r3, r3, #7
 800464c:	3308      	adds	r3, #8
 800464e:	9303      	str	r3, [sp, #12]
 8004650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004652:	4433      	add	r3, r6
 8004654:	9309      	str	r3, [sp, #36]	@ 0x24
 8004656:	e76a      	b.n	800452e <_svfiprintf_r+0x52>
 8004658:	fb0c 3202 	mla	r2, ip, r2, r3
 800465c:	460c      	mov	r4, r1
 800465e:	2001      	movs	r0, #1
 8004660:	e7a8      	b.n	80045b4 <_svfiprintf_r+0xd8>
 8004662:	2300      	movs	r3, #0
 8004664:	3401      	adds	r4, #1
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	4619      	mov	r1, r3
 800466a:	f04f 0c0a 	mov.w	ip, #10
 800466e:	4620      	mov	r0, r4
 8004670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004674:	3a30      	subs	r2, #48	@ 0x30
 8004676:	2a09      	cmp	r2, #9
 8004678:	d903      	bls.n	8004682 <_svfiprintf_r+0x1a6>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0c6      	beq.n	800460c <_svfiprintf_r+0x130>
 800467e:	9105      	str	r1, [sp, #20]
 8004680:	e7c4      	b.n	800460c <_svfiprintf_r+0x130>
 8004682:	fb0c 2101 	mla	r1, ip, r1, r2
 8004686:	4604      	mov	r4, r0
 8004688:	2301      	movs	r3, #1
 800468a:	e7f0      	b.n	800466e <_svfiprintf_r+0x192>
 800468c:	ab03      	add	r3, sp, #12
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	462a      	mov	r2, r5
 8004692:	4b0e      	ldr	r3, [pc, #56]	@ (80046cc <_svfiprintf_r+0x1f0>)
 8004694:	a904      	add	r1, sp, #16
 8004696:	4638      	mov	r0, r7
 8004698:	f3af 8000 	nop.w
 800469c:	1c42      	adds	r2, r0, #1
 800469e:	4606      	mov	r6, r0
 80046a0:	d1d6      	bne.n	8004650 <_svfiprintf_r+0x174>
 80046a2:	89ab      	ldrh	r3, [r5, #12]
 80046a4:	065b      	lsls	r3, r3, #25
 80046a6:	f53f af2d 	bmi.w	8004504 <_svfiprintf_r+0x28>
 80046aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046ac:	e72c      	b.n	8004508 <_svfiprintf_r+0x2c>
 80046ae:	ab03      	add	r3, sp, #12
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	462a      	mov	r2, r5
 80046b4:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <_svfiprintf_r+0x1f0>)
 80046b6:	a904      	add	r1, sp, #16
 80046b8:	4638      	mov	r0, r7
 80046ba:	f000 f879 	bl	80047b0 <_printf_i>
 80046be:	e7ed      	b.n	800469c <_svfiprintf_r+0x1c0>
 80046c0:	08004bd0 	.word	0x08004bd0
 80046c4:	08004bda 	.word	0x08004bda
 80046c8:	00000000 	.word	0x00000000
 80046cc:	08004425 	.word	0x08004425
 80046d0:	08004bd6 	.word	0x08004bd6

080046d4 <_printf_common>:
 80046d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	4616      	mov	r6, r2
 80046da:	4698      	mov	r8, r3
 80046dc:	688a      	ldr	r2, [r1, #8]
 80046de:	690b      	ldr	r3, [r1, #16]
 80046e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bfb8      	it	lt
 80046e8:	4613      	movlt	r3, r2
 80046ea:	6033      	str	r3, [r6, #0]
 80046ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046f0:	4607      	mov	r7, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	b10a      	cbz	r2, 80046fa <_printf_common+0x26>
 80046f6:	3301      	adds	r3, #1
 80046f8:	6033      	str	r3, [r6, #0]
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	0699      	lsls	r1, r3, #26
 80046fe:	bf42      	ittt	mi
 8004700:	6833      	ldrmi	r3, [r6, #0]
 8004702:	3302      	addmi	r3, #2
 8004704:	6033      	strmi	r3, [r6, #0]
 8004706:	6825      	ldr	r5, [r4, #0]
 8004708:	f015 0506 	ands.w	r5, r5, #6
 800470c:	d106      	bne.n	800471c <_printf_common+0x48>
 800470e:	f104 0a19 	add.w	sl, r4, #25
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	6832      	ldr	r2, [r6, #0]
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	42ab      	cmp	r3, r5
 800471a:	dc26      	bgt.n	800476a <_printf_common+0x96>
 800471c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004720:	6822      	ldr	r2, [r4, #0]
 8004722:	3b00      	subs	r3, #0
 8004724:	bf18      	it	ne
 8004726:	2301      	movne	r3, #1
 8004728:	0692      	lsls	r2, r2, #26
 800472a:	d42b      	bmi.n	8004784 <_printf_common+0xb0>
 800472c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004730:	4641      	mov	r1, r8
 8004732:	4638      	mov	r0, r7
 8004734:	47c8      	blx	r9
 8004736:	3001      	adds	r0, #1
 8004738:	d01e      	beq.n	8004778 <_printf_common+0xa4>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	6922      	ldr	r2, [r4, #16]
 800473e:	f003 0306 	and.w	r3, r3, #6
 8004742:	2b04      	cmp	r3, #4
 8004744:	bf02      	ittt	eq
 8004746:	68e5      	ldreq	r5, [r4, #12]
 8004748:	6833      	ldreq	r3, [r6, #0]
 800474a:	1aed      	subeq	r5, r5, r3
 800474c:	68a3      	ldr	r3, [r4, #8]
 800474e:	bf0c      	ite	eq
 8004750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004754:	2500      	movne	r5, #0
 8004756:	4293      	cmp	r3, r2
 8004758:	bfc4      	itt	gt
 800475a:	1a9b      	subgt	r3, r3, r2
 800475c:	18ed      	addgt	r5, r5, r3
 800475e:	2600      	movs	r6, #0
 8004760:	341a      	adds	r4, #26
 8004762:	42b5      	cmp	r5, r6
 8004764:	d11a      	bne.n	800479c <_printf_common+0xc8>
 8004766:	2000      	movs	r0, #0
 8004768:	e008      	b.n	800477c <_printf_common+0xa8>
 800476a:	2301      	movs	r3, #1
 800476c:	4652      	mov	r2, sl
 800476e:	4641      	mov	r1, r8
 8004770:	4638      	mov	r0, r7
 8004772:	47c8      	blx	r9
 8004774:	3001      	adds	r0, #1
 8004776:	d103      	bne.n	8004780 <_printf_common+0xac>
 8004778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800477c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004780:	3501      	adds	r5, #1
 8004782:	e7c6      	b.n	8004712 <_printf_common+0x3e>
 8004784:	18e1      	adds	r1, r4, r3
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	2030      	movs	r0, #48	@ 0x30
 800478a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800478e:	4422      	add	r2, r4
 8004790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004798:	3302      	adds	r3, #2
 800479a:	e7c7      	b.n	800472c <_printf_common+0x58>
 800479c:	2301      	movs	r3, #1
 800479e:	4622      	mov	r2, r4
 80047a0:	4641      	mov	r1, r8
 80047a2:	4638      	mov	r0, r7
 80047a4:	47c8      	blx	r9
 80047a6:	3001      	adds	r0, #1
 80047a8:	d0e6      	beq.n	8004778 <_printf_common+0xa4>
 80047aa:	3601      	adds	r6, #1
 80047ac:	e7d9      	b.n	8004762 <_printf_common+0x8e>
	...

080047b0 <_printf_i>:
 80047b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	7e0f      	ldrb	r7, [r1, #24]
 80047b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047b8:	2f78      	cmp	r7, #120	@ 0x78
 80047ba:	4691      	mov	r9, r2
 80047bc:	4680      	mov	r8, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	469a      	mov	sl, r3
 80047c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047c6:	d807      	bhi.n	80047d8 <_printf_i+0x28>
 80047c8:	2f62      	cmp	r7, #98	@ 0x62
 80047ca:	d80a      	bhi.n	80047e2 <_printf_i+0x32>
 80047cc:	2f00      	cmp	r7, #0
 80047ce:	f000 80d2 	beq.w	8004976 <_printf_i+0x1c6>
 80047d2:	2f58      	cmp	r7, #88	@ 0x58
 80047d4:	f000 80b9 	beq.w	800494a <_printf_i+0x19a>
 80047d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047e0:	e03a      	b.n	8004858 <_printf_i+0xa8>
 80047e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047e6:	2b15      	cmp	r3, #21
 80047e8:	d8f6      	bhi.n	80047d8 <_printf_i+0x28>
 80047ea:	a101      	add	r1, pc, #4	@ (adr r1, 80047f0 <_printf_i+0x40>)
 80047ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047f0:	08004849 	.word	0x08004849
 80047f4:	0800485d 	.word	0x0800485d
 80047f8:	080047d9 	.word	0x080047d9
 80047fc:	080047d9 	.word	0x080047d9
 8004800:	080047d9 	.word	0x080047d9
 8004804:	080047d9 	.word	0x080047d9
 8004808:	0800485d 	.word	0x0800485d
 800480c:	080047d9 	.word	0x080047d9
 8004810:	080047d9 	.word	0x080047d9
 8004814:	080047d9 	.word	0x080047d9
 8004818:	080047d9 	.word	0x080047d9
 800481c:	0800495d 	.word	0x0800495d
 8004820:	08004887 	.word	0x08004887
 8004824:	08004917 	.word	0x08004917
 8004828:	080047d9 	.word	0x080047d9
 800482c:	080047d9 	.word	0x080047d9
 8004830:	0800497f 	.word	0x0800497f
 8004834:	080047d9 	.word	0x080047d9
 8004838:	08004887 	.word	0x08004887
 800483c:	080047d9 	.word	0x080047d9
 8004840:	080047d9 	.word	0x080047d9
 8004844:	0800491f 	.word	0x0800491f
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6032      	str	r2, [r6, #0]
 8004850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004858:	2301      	movs	r3, #1
 800485a:	e09d      	b.n	8004998 <_printf_i+0x1e8>
 800485c:	6833      	ldr	r3, [r6, #0]
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	1d19      	adds	r1, r3, #4
 8004862:	6031      	str	r1, [r6, #0]
 8004864:	0606      	lsls	r6, r0, #24
 8004866:	d501      	bpl.n	800486c <_printf_i+0xbc>
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	e003      	b.n	8004874 <_printf_i+0xc4>
 800486c:	0645      	lsls	r5, r0, #25
 800486e:	d5fb      	bpl.n	8004868 <_printf_i+0xb8>
 8004870:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004874:	2d00      	cmp	r5, #0
 8004876:	da03      	bge.n	8004880 <_printf_i+0xd0>
 8004878:	232d      	movs	r3, #45	@ 0x2d
 800487a:	426d      	negs	r5, r5
 800487c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004880:	4859      	ldr	r0, [pc, #356]	@ (80049e8 <_printf_i+0x238>)
 8004882:	230a      	movs	r3, #10
 8004884:	e011      	b.n	80048aa <_printf_i+0xfa>
 8004886:	6821      	ldr	r1, [r4, #0]
 8004888:	6833      	ldr	r3, [r6, #0]
 800488a:	0608      	lsls	r0, r1, #24
 800488c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004890:	d402      	bmi.n	8004898 <_printf_i+0xe8>
 8004892:	0649      	lsls	r1, r1, #25
 8004894:	bf48      	it	mi
 8004896:	b2ad      	uxthmi	r5, r5
 8004898:	2f6f      	cmp	r7, #111	@ 0x6f
 800489a:	4853      	ldr	r0, [pc, #332]	@ (80049e8 <_printf_i+0x238>)
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	bf14      	ite	ne
 80048a0:	230a      	movne	r3, #10
 80048a2:	2308      	moveq	r3, #8
 80048a4:	2100      	movs	r1, #0
 80048a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048aa:	6866      	ldr	r6, [r4, #4]
 80048ac:	60a6      	str	r6, [r4, #8]
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	bfa2      	ittt	ge
 80048b2:	6821      	ldrge	r1, [r4, #0]
 80048b4:	f021 0104 	bicge.w	r1, r1, #4
 80048b8:	6021      	strge	r1, [r4, #0]
 80048ba:	b90d      	cbnz	r5, 80048c0 <_printf_i+0x110>
 80048bc:	2e00      	cmp	r6, #0
 80048be:	d04b      	beq.n	8004958 <_printf_i+0x1a8>
 80048c0:	4616      	mov	r6, r2
 80048c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80048c6:	fb03 5711 	mls	r7, r3, r1, r5
 80048ca:	5dc7      	ldrb	r7, [r0, r7]
 80048cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048d0:	462f      	mov	r7, r5
 80048d2:	42bb      	cmp	r3, r7
 80048d4:	460d      	mov	r5, r1
 80048d6:	d9f4      	bls.n	80048c2 <_printf_i+0x112>
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d10b      	bne.n	80048f4 <_printf_i+0x144>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	07df      	lsls	r7, r3, #31
 80048e0:	d508      	bpl.n	80048f4 <_printf_i+0x144>
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	6861      	ldr	r1, [r4, #4]
 80048e6:	4299      	cmp	r1, r3
 80048e8:	bfde      	ittt	le
 80048ea:	2330      	movle	r3, #48	@ 0x30
 80048ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80048f4:	1b92      	subs	r2, r2, r6
 80048f6:	6122      	str	r2, [r4, #16]
 80048f8:	f8cd a000 	str.w	sl, [sp]
 80048fc:	464b      	mov	r3, r9
 80048fe:	aa03      	add	r2, sp, #12
 8004900:	4621      	mov	r1, r4
 8004902:	4640      	mov	r0, r8
 8004904:	f7ff fee6 	bl	80046d4 <_printf_common>
 8004908:	3001      	adds	r0, #1
 800490a:	d14a      	bne.n	80049a2 <_printf_i+0x1f2>
 800490c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004910:	b004      	add	sp, #16
 8004912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f043 0320 	orr.w	r3, r3, #32
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	4833      	ldr	r0, [pc, #204]	@ (80049ec <_printf_i+0x23c>)
 8004920:	2778      	movs	r7, #120	@ 0x78
 8004922:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	6831      	ldr	r1, [r6, #0]
 800492a:	061f      	lsls	r7, r3, #24
 800492c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004930:	d402      	bmi.n	8004938 <_printf_i+0x188>
 8004932:	065f      	lsls	r7, r3, #25
 8004934:	bf48      	it	mi
 8004936:	b2ad      	uxthmi	r5, r5
 8004938:	6031      	str	r1, [r6, #0]
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	bf44      	itt	mi
 800493e:	f043 0320 	orrmi.w	r3, r3, #32
 8004942:	6023      	strmi	r3, [r4, #0]
 8004944:	b11d      	cbz	r5, 800494e <_printf_i+0x19e>
 8004946:	2310      	movs	r3, #16
 8004948:	e7ac      	b.n	80048a4 <_printf_i+0xf4>
 800494a:	4827      	ldr	r0, [pc, #156]	@ (80049e8 <_printf_i+0x238>)
 800494c:	e7e9      	b.n	8004922 <_printf_i+0x172>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	f023 0320 	bic.w	r3, r3, #32
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	e7f6      	b.n	8004946 <_printf_i+0x196>
 8004958:	4616      	mov	r6, r2
 800495a:	e7bd      	b.n	80048d8 <_printf_i+0x128>
 800495c:	6833      	ldr	r3, [r6, #0]
 800495e:	6825      	ldr	r5, [r4, #0]
 8004960:	6961      	ldr	r1, [r4, #20]
 8004962:	1d18      	adds	r0, r3, #4
 8004964:	6030      	str	r0, [r6, #0]
 8004966:	062e      	lsls	r6, r5, #24
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	d501      	bpl.n	8004970 <_printf_i+0x1c0>
 800496c:	6019      	str	r1, [r3, #0]
 800496e:	e002      	b.n	8004976 <_printf_i+0x1c6>
 8004970:	0668      	lsls	r0, r5, #25
 8004972:	d5fb      	bpl.n	800496c <_printf_i+0x1bc>
 8004974:	8019      	strh	r1, [r3, #0]
 8004976:	2300      	movs	r3, #0
 8004978:	6123      	str	r3, [r4, #16]
 800497a:	4616      	mov	r6, r2
 800497c:	e7bc      	b.n	80048f8 <_printf_i+0x148>
 800497e:	6833      	ldr	r3, [r6, #0]
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	6032      	str	r2, [r6, #0]
 8004984:	681e      	ldr	r6, [r3, #0]
 8004986:	6862      	ldr	r2, [r4, #4]
 8004988:	2100      	movs	r1, #0
 800498a:	4630      	mov	r0, r6
 800498c:	f7fb fc28 	bl	80001e0 <memchr>
 8004990:	b108      	cbz	r0, 8004996 <_printf_i+0x1e6>
 8004992:	1b80      	subs	r0, r0, r6
 8004994:	6060      	str	r0, [r4, #4]
 8004996:	6863      	ldr	r3, [r4, #4]
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	2300      	movs	r3, #0
 800499c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049a0:	e7aa      	b.n	80048f8 <_printf_i+0x148>
 80049a2:	6923      	ldr	r3, [r4, #16]
 80049a4:	4632      	mov	r2, r6
 80049a6:	4649      	mov	r1, r9
 80049a8:	4640      	mov	r0, r8
 80049aa:	47d0      	blx	sl
 80049ac:	3001      	adds	r0, #1
 80049ae:	d0ad      	beq.n	800490c <_printf_i+0x15c>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	079b      	lsls	r3, r3, #30
 80049b4:	d413      	bmi.n	80049de <_printf_i+0x22e>
 80049b6:	68e0      	ldr	r0, [r4, #12]
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	4298      	cmp	r0, r3
 80049bc:	bfb8      	it	lt
 80049be:	4618      	movlt	r0, r3
 80049c0:	e7a6      	b.n	8004910 <_printf_i+0x160>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4632      	mov	r2, r6
 80049c6:	4649      	mov	r1, r9
 80049c8:	4640      	mov	r0, r8
 80049ca:	47d0      	blx	sl
 80049cc:	3001      	adds	r0, #1
 80049ce:	d09d      	beq.n	800490c <_printf_i+0x15c>
 80049d0:	3501      	adds	r5, #1
 80049d2:	68e3      	ldr	r3, [r4, #12]
 80049d4:	9903      	ldr	r1, [sp, #12]
 80049d6:	1a5b      	subs	r3, r3, r1
 80049d8:	42ab      	cmp	r3, r5
 80049da:	dcf2      	bgt.n	80049c2 <_printf_i+0x212>
 80049dc:	e7eb      	b.n	80049b6 <_printf_i+0x206>
 80049de:	2500      	movs	r5, #0
 80049e0:	f104 0619 	add.w	r6, r4, #25
 80049e4:	e7f5      	b.n	80049d2 <_printf_i+0x222>
 80049e6:	bf00      	nop
 80049e8:	08004be1 	.word	0x08004be1
 80049ec:	08004bf2 	.word	0x08004bf2

080049f0 <memmove>:
 80049f0:	4288      	cmp	r0, r1
 80049f2:	b510      	push	{r4, lr}
 80049f4:	eb01 0402 	add.w	r4, r1, r2
 80049f8:	d902      	bls.n	8004a00 <memmove+0x10>
 80049fa:	4284      	cmp	r4, r0
 80049fc:	4623      	mov	r3, r4
 80049fe:	d807      	bhi.n	8004a10 <memmove+0x20>
 8004a00:	1e43      	subs	r3, r0, #1
 8004a02:	42a1      	cmp	r1, r4
 8004a04:	d008      	beq.n	8004a18 <memmove+0x28>
 8004a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a0e:	e7f8      	b.n	8004a02 <memmove+0x12>
 8004a10:	4402      	add	r2, r0
 8004a12:	4601      	mov	r1, r0
 8004a14:	428a      	cmp	r2, r1
 8004a16:	d100      	bne.n	8004a1a <memmove+0x2a>
 8004a18:	bd10      	pop	{r4, pc}
 8004a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a22:	e7f7      	b.n	8004a14 <memmove+0x24>

08004a24 <_sbrk_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4d06      	ldr	r5, [pc, #24]	@ (8004a40 <_sbrk_r+0x1c>)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	f7fc fabc 	bl	8000fac <_sbrk>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d102      	bne.n	8004a3e <_sbrk_r+0x1a>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	b103      	cbz	r3, 8004a3e <_sbrk_r+0x1a>
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	20000350 	.word	0x20000350

08004a44 <memcpy>:
 8004a44:	440a      	add	r2, r1
 8004a46:	4291      	cmp	r1, r2
 8004a48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004a4c:	d100      	bne.n	8004a50 <memcpy+0xc>
 8004a4e:	4770      	bx	lr
 8004a50:	b510      	push	{r4, lr}
 8004a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a5a:	4291      	cmp	r1, r2
 8004a5c:	d1f9      	bne.n	8004a52 <memcpy+0xe>
 8004a5e:	bd10      	pop	{r4, pc}

08004a60 <_realloc_r>:
 8004a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a64:	4680      	mov	r8, r0
 8004a66:	4615      	mov	r5, r2
 8004a68:	460c      	mov	r4, r1
 8004a6a:	b921      	cbnz	r1, 8004a76 <_realloc_r+0x16>
 8004a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a70:	4611      	mov	r1, r2
 8004a72:	f7ff bc4b 	b.w	800430c <_malloc_r>
 8004a76:	b92a      	cbnz	r2, 8004a84 <_realloc_r+0x24>
 8004a78:	f7ff fbdc 	bl	8004234 <_free_r>
 8004a7c:	2400      	movs	r4, #0
 8004a7e:	4620      	mov	r0, r4
 8004a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a84:	f000 f81a 	bl	8004abc <_malloc_usable_size_r>
 8004a88:	4285      	cmp	r5, r0
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	d802      	bhi.n	8004a94 <_realloc_r+0x34>
 8004a8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a92:	d8f4      	bhi.n	8004a7e <_realloc_r+0x1e>
 8004a94:	4629      	mov	r1, r5
 8004a96:	4640      	mov	r0, r8
 8004a98:	f7ff fc38 	bl	800430c <_malloc_r>
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d0ec      	beq.n	8004a7c <_realloc_r+0x1c>
 8004aa2:	42b5      	cmp	r5, r6
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	bf28      	it	cs
 8004aaa:	4632      	movcs	r2, r6
 8004aac:	f7ff ffca 	bl	8004a44 <memcpy>
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	f7ff fbbe 	bl	8004234 <_free_r>
 8004ab8:	463c      	mov	r4, r7
 8004aba:	e7e0      	b.n	8004a7e <_realloc_r+0x1e>

08004abc <_malloc_usable_size_r>:
 8004abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac0:	1f18      	subs	r0, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bfbc      	itt	lt
 8004ac6:	580b      	ldrlt	r3, [r1, r0]
 8004ac8:	18c0      	addlt	r0, r0, r3
 8004aca:	4770      	bx	lr

08004acc <_init>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr

08004ad8 <_fini>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr
